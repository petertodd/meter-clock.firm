gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-9-2008  01:20:34
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Sun Nov  9 01:07:48 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Sun Nov  9 01:07:48 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_ds3231
                                           	global _from_bcd
                                           	global _to_bcd
                                           	global _read_time_from_ds3231
                                           	global _write_time_to_ds3231
                                           	global _ds3231_time
                                           	global _read_from_ds3231
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __divuchar
                                           	extern __moduchar
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _init_i2c
                                           	extern _i2c_reset
                                           	extern _i2c_start
                                           	extern _i2c_stop
                                           	extern _i2c_write
                                           	extern _i2c_read
                                           	extern _trigger_save_eeprom
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_ds3231_0	udata
                                           _ds3231_time	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ds3231__write_time_to_ds3231	code
                                           _write_time_to_ds3231:
                                           ;	.line	65; ds3231.c	i2c_reset();
000eb4   ecdb     call	0x11b6, 0           	CALL	_i2c_reset
000eb6   f008
                                           ;	.line	66; ds3231.c	i2c_start();
000eb8   ece9     call	0x11d2, 0           	CALL	_i2c_start
000eba   f008
                                           ;	.line	67; ds3231.c	i2c_write(slave_addr_write);
000ebc   0ed0     movlw	0xd0               	MOVLW	0xd0
000ebe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec0   ec34     call	0x1068, 0           	CALL	_i2c_write
000ec2   f008
000ec4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	68; ds3231.c	i2c_write(0);
000ec6   0e00     movlw	0                  	MOVLW	0x00
000ec8   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000eca   ec34     call	0x1068, 0           	CALL	_i2c_write
000ecc   f008
000ece   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000ed0   0100     movlb	0                  	BANKSEL	_ds3231_time
                                           ;	.line	69; ds3231.c	i2c_write(to_bcd(ds3231_time.secs));
000ed2   51ca     movf	0xca, 0, 0x1        	MOVF	_ds3231_time, W, B
000ed4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ed6   ecc5     call	0xd8a, 0            	CALL	_to_bcd
000ed8   f006
000eda   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000edc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ede   ec34     call	0x1068, 0           	CALL	_i2c_write
000ee0   f008
000ee2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000ee4   0100     movlb	0                  	BANKSEL	(_ds3231_time + 1)
                                           ;	.line	70; ds3231.c	i2c_write(to_bcd(ds3231_time.mins));
000ee6   51cb     movf	0xcb, 0, 0x1        	MOVF	(_ds3231_time + 1), W, B
000ee8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eea   ecc5     call	0xd8a, 0            	CALL	_to_bcd
000eec   f006
000eee   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ef2   ec34     call	0x1068, 0           	CALL	_i2c_write
000ef4   f008
000ef6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000ef8   0100     movlb	0                  	BANKSEL	(_ds3231_time + 2)
                                           ;	.line	71; ds3231.c	i2c_write(to_bcd(ds3231_time.hours));
000efa   51cc     movf	0xcc, 0, 0x1        	MOVF	(_ds3231_time + 2), W, B
000efc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000efe   ecc5     call	0xd8a, 0            	CALL	_to_bcd
000f00   f006
000f02   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000f04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f06   ec34     call	0x1068, 0           	CALL	_i2c_write
000f08   f008
000f0a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	72; ds3231.c	i2c_stop();
000f0c   ecfc     call	0x11f8, 0           	CALL	_i2c_stop
000f0e   f008
000f10   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__read_time_from_ds3231	code
                                           _read_time_from_ds3231:
                                           ;	.line	55; ds3231.c	void read_time_from_ds3231(){
000824   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000826   ffe5
000828   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00082a   ffe5
                                           ;	.line	56; ds3231.c	ds3231_time.secs = from_bcd(read_from_ds3231(0));
00082c   0e00     movlw	0                  	MOVLW	0x00
00082e   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000830   ec89     call	0xf12, 0            	CALL	_read_from_ds3231
000832   f007
000834   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000836   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000838   ec5c     call	0x10b8, 0           	CALL	_from_bcd
00083a   f008
00083c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00083e   0100     movlb	0                  	BANKSEL	_ds3231_time
000840   6fca     movwf	0xca, 0x1          	MOVWF	_ds3231_time, B
                                           ;	.line	57; ds3231.c	ds3231_time.mins = from_bcd(read_from_ds3231(1));
000842   0e01     movlw	0x1                	MOVLW	0x01
000844   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000846   ec89     call	0xf12, 0            	CALL	_read_from_ds3231
000848   f007
00084a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00084c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00084e   ec5c     call	0x10b8, 0           	CALL	_from_bcd
000850   f008
000852   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000854   0100     movlb	0                  	BANKSEL	(_ds3231_time + 1)
000856   6fcb     movwf	0xcb, 0x1          	MOVWF	(_ds3231_time + 1), B
                                           ;	.line	58; ds3231.c	ds3231_time.hours = from_bcd(read_from_ds3231(2));
000858   0e02     movlw	0x2                	MOVLW	0x02
00085a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00085c   ec89     call	0xf12, 0            	CALL	_read_from_ds3231
00085e   f007
000860   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000862   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000864   ec5c     call	0x10b8, 0           	CALL	_from_bcd
000866   f008
000868   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00086a   0100     movlb	0                  	BANKSEL	(_ds3231_time + 2)
00086c   6fcc     movwf	0xcc, 0x1          	MOVWF	(_ds3231_time + 2), B
                                           ;	.line	61; ds3231.c	new_temp_sample(read_from_ds3231(0x11));
00086e   0e11     movlw	0x11               	MOVLW	0x11
000870   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000872   ec89     call	0xf12, 0            	CALL	_read_from_ds3231
000874   f007
000876   6e00     movwf	0, 0               	MOVWF	r0x00
000878   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00087a   0100     movlb	0                  	BANKSEL	(_eeprom_data + 16)
00087c   51b0     movf	0xb0, 0, 0x1        	MOVF	(_eeprom_data + 16), W, B
00087e   0f80     addlw	0x80               	ADDLW	0x80
000880   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
000882   5000     movf	0, 0, 0             	MOVF	r0x00, W
000884   0f80     addlw	0x80               	ADDLW	0x80
000886   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
000888   e20e     bc	0x8a6                 	BC	_00122_DS_
00088a   0e11     movlw	0x11               	MOVLW	0x11
00088c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00088e   ec89     call	0xf12, 0            	CALL	_read_from_ds3231
000890   f007
000892   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000894   6a01     clrf	0x1, 0              	CLRF	r0x01
000896   0100     movlb	0                  	BANKSEL	(_eeprom_data + 16)
000898   6fb0     movwf	0xb0, 0x1          	MOVWF	(_eeprom_data + 16), B
00089a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00089c   6bb1     clrf	0xb1, 0x1           	CLRF	(_eeprom_data + 17), B
                                           ; removed redundant BANKSEL
00089e   6bb2     clrf	0xb2, 0x1           	CLRF	(_eeprom_data + 18), B
                                           ; removed redundant BANKSEL
0008a0   6bb3     clrf	0xb3, 0x1           	CLRF	(_eeprom_data + 19), B
0008a2   ec0e     call	0x121c, 0           	CALL	_trigger_save_eeprom
0008a4   f009
                                           _00122_DS_:
0008a6   0e11     movlw	0x11               	MOVLW	0x11
0008a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008aa   ec89     call	0xf12, 0            	CALL	_read_from_ds3231
0008ac   f007
0008ae   6e00     movwf	0, 0               	MOVWF	r0x00
0008b0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0008b2   0100     movlb	0                  	BANKSEL	(_eeprom_data + 20)
0008b4   51b4     movf	0xb4, 0, 0x1        	MOVF	(_eeprom_data + 20), W, B
0008b6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008ba   0f80     addlw	0x80               	ADDLW	0x80
0008bc   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
0008be   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008c0   0f80     addlw	0x80               	ADDLW	0x80
0008c2   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
0008c4   e20e     bc	0x8e2                 	BC	_00125_DS_
0008c6   0e11     movlw	0x11               	MOVLW	0x11
0008c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008ca   ec89     call	0xf12, 0            	CALL	_read_from_ds3231
0008cc   f007
0008ce   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0008d0   6a01     clrf	0x1, 0              	CLRF	r0x01
0008d2   0100     movlb	0                  	BANKSEL	(_eeprom_data + 20)
0008d4   6fb4     movwf	0xb4, 0x1          	MOVWF	(_eeprom_data + 20), B
0008d6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0008d8   6bb5     clrf	0xb5, 0x1           	CLRF	(_eeprom_data + 21), B
                                           ; removed redundant BANKSEL
0008da   6bb6     clrf	0xb6, 0x1           	CLRF	(_eeprom_data + 22), B
                                           ; removed redundant BANKSEL
0008dc   6bb7     clrf	0xb7, 0x1           	CLRF	(_eeprom_data + 23), B
0008de   ec0e     call	0x121c, 0           	CALL	_trigger_save_eeprom
0008e0   f009
                                           _00125_DS_:
0008e2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0008e4   f001
0008e6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0008e8   f000
0008ea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__read_from_ds3231	code
                                           _read_from_ds3231:
                                           ;	.line	42; ds3231.c	uint8_t read_from_ds3231(uint8_t addr){
000f12   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f14   ffe5
000f16   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f18   ffd9
000f1a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f1c   ffe5
000f1e   0e02     movlw	0x2                	MOVLW	0x02
000f20   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000f22   f000
                                           ;	.line	44; ds3231.c	i2c_reset();
000f24   ecdb     call	0x11b6, 0           	CALL	_i2c_reset
000f26   f008
                                           ;	.line	45; ds3231.c	i2c_start();
000f28   ece9     call	0x11d2, 0           	CALL	_i2c_start
000f2a   f008
                                           ;	.line	46; ds3231.c	i2c_write(slave_addr_write);
000f2c   0ed0     movlw	0xd0               	MOVLW	0xd0
000f2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f30   ec34     call	0x1068, 0           	CALL	_i2c_write
000f32   f008
000f34   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	47; ds3231.c	i2c_write(addr);
000f36   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f3a   ec34     call	0x1068, 0           	CALL	_i2c_write
000f3c   f008
000f3e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	48; ds3231.c	i2c_start();
000f40   ece9     call	0x11d2, 0           	CALL	_i2c_start
000f42   f008
                                           ;	.line	49; ds3231.c	i2c_write(slave_addr_read);
000f44   0ed1     movlw	0xd1               	MOVLW	0xd1
000f46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f48   ec34     call	0x1068, 0           	CALL	_i2c_write
000f4a   f008
000f4c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	50; ds3231.c	r = i2c_read(true);
000f4e   0e01     movlw	0x1                	MOVLW	0x01
000f50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f52   ec2a     call	0xe54, 0            	CALL	_i2c_read
000f54   f007
000f56   6e00     movwf	0, 0               	MOVWF	r0x00
000f58   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	51; ds3231.c	i2c_stop();
000f5a   ecfc     call	0x11f8, 0           	CALL	_i2c_stop
000f5c   f008
                                           ;	.line	52; ds3231.c	return r;
000f5e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f60   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f62   f000
000f64   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f66   ffd9
000f68   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__to_bcd	code
                                           _to_bcd:
                                           ;	.line	38; ds3231.c	uint8_t to_bcd(uint8_t d){
000d8a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d8c   ffe5
000d8e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d90   ffd9
000d92   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d94   ffe5
000d96   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d98   ffe5
000d9a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d9c   ffe5
000d9e   0e02     movlw	0x2                	MOVLW	0x02
000da0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000da2   f000
                                           ;	.line	39; ds3231.c	return (((d / 10) << 4) & b(11110000)) | ((d % 10) & b(00001111));
000da4   0e0a     movlw	0xa                	MOVLW	0x0a
000da6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000daa   ffe5
000dac   ec8e     call	0xd1c, 0            	CALL	__divuchar
000dae   f006
000db0   6e01     movwf	0x1, 0             	MOVWF	r0x01
000db2   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000db4   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000db6   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
000db8   0bf0     andlw	0xf0               	ANDLW	0xf0
000dba   6e02     movwf	0x2, 0             	MOVWF	r0x02
000dbc   0ef0     movlw	0xf0               	MOVLW	0xf0
000dbe   1402     andwf	0x2, 0, 0          	ANDWF	r0x02, W
000dc0   6e01     movwf	0x1, 0             	MOVWF	r0x01
000dc2   0e0a     movlw	0xa                	MOVLW	0x0a
000dc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000dc6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000dc8   ffe5
000dca   ec1b     call	0xc36, 0            	CALL	__moduchar
000dcc   f006
000dce   6e00     movwf	0, 0               	MOVWF	r0x00
000dd0   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000dd2   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000dd4   0e0f     movlw	0xf                	MOVLW	0x0f
000dd6   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000dd8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dda   1201     iorwf	0x1, 0x1, 0        	IORWF	r0x01, F
000ddc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dde   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000de0   f002
000de2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000de4   f001
000de6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000de8   f000
000dea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000dec   ffd9
000dee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__from_bcd	code
                                           _from_bcd:
                                           ;	.line	34; ds3231.c	uint8_t from_bcd(uint8_t d){
0010b8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0010ba   ffe5
0010bc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0010be   ffd9
0010c0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0010c2   ffe5
0010c4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0010c6   ffe5
0010c8   0e02     movlw	0x2                	MOVLW	0x02
0010ca   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0010cc   f000
                                           ;	.line	35; ds3231.c	return (d & b(00001111)) + (((d & b(11110000)) >> 4) * 10);
0010ce   0e0f     movlw	0xf                	MOVLW	0x0f
0010d0   1400     andwf	0, 0, 0            	ANDWF	r0x00, W
0010d2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010d4   0ef0     movlw	0xf0               	MOVLW	0xf0
0010d6   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0010d8   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
0010da   0b0f     andlw	0xf                	ANDLW	0x0f
                                           ; ;multiply lit val:0x0a by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0010dc   0d0a     mullw	0xa                	MULLW	0x0a
0010de   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0010e0   f000
0010e2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010e4   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0010e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010e8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0010ea   f001
0010ec   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0010ee   f000
0010f0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0010f2   ffd9
0010f4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__init_ds3231	code
                                           _init_ds3231:
                                           ;	.line	31; ds3231.c	init_i2c();
001210   ecee     call	0x11dc, 0           	CALL	_init_i2c
001212   f008
001214   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  552 (0x0228) bytes ( 0.42%)
                                           ;           	  276 (0x0114) words
                                           ; udata size:	    3 (0x0003) bytes ( 4.69%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Sun Nov  9 01:07:48 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_eeprom
                                           	global _save_eeprom_if_needed
                                           	global _trigger_save_eeprom
                                           	global _eeprom_data
                                           	global _incremental_save_counter
                                           	global _do_eeprom_read
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrget1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _incremental_save_counter	db	0x24
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_eeprom_0	udata
                                           _eeprom_data	res	36
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_eeprom__trigger_save_eeprom	code
                                           _trigger_save_eeprom:
00121c   0100     movlb	0                  	BANKSEL	_incremental_save_counter
                                           ;	.line	70; eeprom.c	incremental_save_counter = 0;
00121e   6bc4     clrf	0xc4, 0x1           	CLRF	_incremental_save_counter, B
001220   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__save_eeprom_if_needed	code
                                           _save_eeprom_if_needed:
                                           ;	.line	45; eeprom.c	void save_eeprom_if_needed(){
000caa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000cac   ffe5
000cae   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000cb0   ffd9
000cb2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000cb4   ffe5
000cb6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000cb8   ffe5
000cba   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000cbc   ffe5
                                           ;	.line	46; eeprom.c	if ((incremental_save_counter < sizeof(eeprom_data))
000cbe   0e24     movlw	0x24               	MOVLW	0x24
000cc0   0100     movlb	0                  	BANKSEL	_incremental_save_counter
000cc2   5dc4     subwf	0xc4, 0, 0x1       	SUBWF	_incremental_save_counter, W, B
000cc4   e222     bc	0xd0a                 	BC	_00121_DS_
                                           ;	.line	47; eeprom.c	&& !EECON1bits.WR){ // Is previous write complete?
000cc6   b2a6     btfsc	0xa6, 0x1, 0       	BTFSC	_EECON1bits, 1
000cc8   d020     bra	0xd0a                	BRA	_00121_DS_
                                           ;	.line	48; eeprom.c	EEADR = incremental_save_counter;
000cca   c0c4     movff	0xc4, 0xfa9        	MOVFF	_incremental_save_counter, _EEADR
000ccc   ffa9
                                           ;	.line	50; eeprom.c	EEDATA = ((uint8_t *)(&eeprom_data))[EEADR];
000cce   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
000cd0   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cd2   0ea0     movlw	0xa0               	MOVLW	LOW(_eeprom_data)
000cd4   6e00     movwf	0, 0               	MOVWF	r0x00
000cd6   0e80     movlw	0x80               	MOVLW	0x80
000cd8   6e02     movwf	0x2, 0             	MOVWF	r0x02
000cda   50a9     movf	0xa9, 0, 0          	MOVF	_EEADR, W
000cdc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cde   6ae8     clrf	0xe8, 0             	CLRF	WREG
000ce0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ce2   6ae8     clrf	0xe8, 0             	CLRF	WREG
000ce4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000ce6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000ce8   ffe9
000cea   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000cec   fff3
000cee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cf0   ec90     call	0x1120, 0           	CALL	__gptrget1
000cf2   f008
000cf4   6ea8     movwf	0xa8, 0            	MOVWF	_EEDATA
                                           ;	.line	52; eeprom.c	EECON1bits.EEPGD = 0;
000cf6   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	53; eeprom.c	EECON1bits.CFGS = 0;
000cf8   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	54; eeprom.c	EECON1bits.WREN = 1;
000cfa   84a6     bsf	0xa6, 0x2, 0         	BSF	_EECON1bits, 2
000cfc   0e55     movlw	0x55               	movlw 0x55
000cfe   6ea7     movwf	0xa7, 0            	movwf _EECON2
000d00   0eaa     movlw	0xaa               	movlw 0xAA
000d02   6ea7     movwf	0xa7, 0            	movwf _EECON2
000d04   82a6     bsf	0xa6, 0x1, 0         	bsf _EECON1,1
                                           	
000d06   0100     movlb	0                  	BANKSEL	_incremental_save_counter
                                           ;	.line	65; eeprom.c	incremental_save_counter++;
000d08   2bc4     incf	0xc4, 0x1, 0x1      	INCF	_incremental_save_counter, F, B
                                           _00121_DS_:
000d0a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000d0c   f002
000d0e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d10   f001
000d12   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d14   f000
000d16   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d18   ffd9
000d1a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__init_eeprom	code
                                           _init_eeprom:
                                           ;	.line	34; eeprom.c	void init_eeprom(){
000f6a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f6c   ffe5
000f6e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000f70   ffe5
000f72   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000f74   ffe5
                                           ;	.line	35; eeprom.c	for (EEADR = 0; EEADR < sizeof(eeprom_data); EEADR++){
000f76   6aa9     clrf	0xa9, 0             	CLRF	_EEADR
                                           _00109_DS_:
000f78   0e24     movlw	0x24               	MOVLW	0x24
000f7a   5ca9     subwf	0xa9, 0, 0         	SUBWF	_EEADR, W
000f7c   e21a     bc	0xfb2                 	BC	_00113_DS_
                                           ;	.line	36; eeprom.c	EECON1bits.EEPGD = 0;
000f7e   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	37; eeprom.c	EECON1bits.CFGS = 0;
000f80   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	38; eeprom.c	EECON1bits.RD = 1;
000f82   80a6     bsf	0xa6, 0, 0           	BSF	_EECON1bits, 0
                                           ;	.line	39; eeprom.c	((uint8_t *)(&eeprom_data))[EEADR] = EEDATA;
000f84   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
000f86   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f88   0ea0     movlw	0xa0               	MOVLW	LOW(_eeprom_data)
000f8a   6e00     movwf	0, 0               	MOVWF	r0x00
000f8c   0e80     movlw	0x80               	MOVLW	0x80
000f8e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f90   50a9     movf	0xa9, 0, 0          	MOVF	_EEADR, W
000f92   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f94   6ae8     clrf	0xe8, 0             	CLRF	WREG
000f96   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f98   6ae8     clrf	0xe8, 0             	CLRF	WREG
000f9a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f9c   cfa8     movff	0xfa8, 0xfe5       	MOVFF	_EEDATA, POSTDEC1
000f9e   ffe5
000fa0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000fa2   ffe9
000fa4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000fa6   fff3
000fa8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000faa   ecc8     call	0x1190, 0           	CALL	__gptrput1
000fac   f008
                                           ;	.line	35; eeprom.c	for (EEADR = 0; EEADR < sizeof(eeprom_data); EEADR++){
000fae   2aa9     incf	0xa9, 0x1, 0        	INCF	_EEADR, F
000fb0   d7e3     bra	0xf78                	BRA	_00109_DS_
                                           _00113_DS_:
000fb2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000fb4   f002
000fb6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000fb8   f001
000fba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000fbc   f000
000fbe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__do_eeprom_read	code
                                           _do_eeprom_read:
                                           ;	.line	29; eeprom.c	EECON1bits.EEPGD = 0;
0011f0   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	30; eeprom.c	EECON1bits.CFGS = 0;
0011f2   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	31; eeprom.c	EECON1bits.RD = 1;
0011f4   80a6     bsf	0xa6, 0, 0           	BSF	_EECON1bits, 0
0011f6   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  216 (0x00d8) bytes ( 0.16%)
                                           ;           	  108 (0x006c) words
                                           ; udata size:	   36 (0x0024) bytes (56.25%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Sun Nov  9 01:07:48 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_i2c
                                           	global _i2c_reset
                                           	global _i2c_start
                                           	global _i2c_stop
                                           	global _i2c_write
                                           	global _i2c_read
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_i2c__i2c_read	code
                                           _i2c_read:
                                           ;	.line	89; i2c.c	uint8_t i2c_read(bool ack){
000e54   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e56   ffe5
000e58   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e5a   ffd9
000e5c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e5e   ffe5
000e60   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e62   ffe5
000e64   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e66   ffe5
000e68   0e02     movlw	0x2                	MOVLW	0x02
000e6a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e6c   f000
                                           ;	.line	90; i2c.c	uint8_t i, d = 0;
000e6e   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	91; i2c.c	i2c_sda = 1; 
000e70   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           ;	.line	92; i2c.c	for(i = 8; i != 0; i--) {
000e72   0e08     movlw	0x8                	MOVLW	0x08
000e74   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00151_DS_:
000e76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e78   e00b     bz	0xe90                 	BZ	_00154_DS_
                                           ;	.line	94; i2c.c	d <<= 1;
000e7a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e7c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
                                           _00143_DS_:
                                           ;	.line	96; i2c.c	i2c_scl = 1;
000e7e   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	98; i2c.c	while(i2c_scl_in == 0); // wait for any i2c_scl clock stretching to complete
000e80   a681     btfss	0x81, 0x3, 0       	BTFSS	_PORTBbits, 3
000e82   d7fd     bra	0xe7e                	BRA	_00143_DS_
                                           ;	.line	100; i2c.c	if (i2c_sda_in)
000e84   a481     btfss	0x81, 0x2, 0       	BTFSS	_PORTBbits, 2
000e86   d001     bra	0xe8a                	BRA	_00147_DS_
                                           ;	.line	101; i2c.c	d |= 1;
000e88   8001     bsf	0x1, 0, 0            	BSF	r0x01, 0
                                           _00147_DS_:
                                           ;	.line	102; i2c.c	i2c_scl = 0;
000e8a   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	92; i2c.c	for(i = 8; i != 0; i--) {
000e8c   0602     decf	0x2, 0x1, 0         	DECF	r0x02, F
000e8e   d7f3     bra	0xe76                	BRA	_00151_DS_
                                           _00154_DS_:
                                           ;	.line	105; i2c.c	if (ack)
000e90   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e92   e002     bz	0xe98                 	BZ	_00149_DS_
                                           ;	.line	106; i2c.c	i2c_sda = 0;
000e94   9493     bcf	0x93, 0x2, 0         	BCF	_TRISBbits, 2
000e96   d001     bra	0xe9a                	BRA	_00150_DS_
                                           _00149_DS_:
                                           ;	.line	108; i2c.c	i2c_sda = 1;
000e98   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           _00150_DS_:
                                           ;	.line	111; i2c.c	i2c_scl = 1;
000e9a   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	113; i2c.c	i2c_scl = 0;
000e9c   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	115; i2c.c	i2c_sda = 1;
000e9e   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           ;	.line	117; i2c.c	return d;
000ea0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ea2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000ea4   f002
000ea6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000ea8   f001
000eaa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000eac   f000
000eae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000eb0   ffd9
000eb2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_write	code
                                           _i2c_write:
                                           ;	.line	59; i2c.c	bool i2c_write(uint8_t d){
001068   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00106a   ffe5
00106c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00106e   ffd9
001070   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001072   ffe5
001074   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001076   ffe5
001078   0e02     movlw	0x2                	MOVLW	0x02
00107a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00107c   f000
                                           ;	.line	63; i2c.c	for(i = 8; i != 0; i--) {
00107e   0e08     movlw	0x8                	MOVLW	0x08
001080   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00128_DS_:
001082   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001084   e00b     bz	0x109c                	BZ	_00131_DS_
                                           ;	.line	64; i2c.c	if(d & b(10000000))
001086   ae00     btfss	0, 0x7, 0          	BTFSS	r0x00, 7
001088   d002     bra	0x108e               	BRA	_00126_DS_
                                           ;	.line	65; i2c.c	i2c_sda = 1;
00108a   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
00108c   d001     bra	0x1090               	BRA	_00127_DS_
                                           _00126_DS_:
                                           ;	.line	67; i2c.c	i2c_sda = 0;
00108e   9493     bcf	0x93, 0x2, 0         	BCF	_TRISBbits, 2
                                           _00127_DS_:
                                           ;	.line	70; i2c.c	i2c_scl = 1;
001090   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	72; i2c.c	i2c_scl = 0;
001092   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	74; i2c.c	d <<= 1;
001094   5000     movf	0, 0, 0             	MOVF	r0x00, W
001096   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
                                           ;	.line	63; i2c.c	for(i = 8; i != 0; i--) {
001098   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
00109a   d7f3     bra	0x1082               	BRA	_00128_DS_
                                           _00131_DS_:
                                           ;	.line	78; i2c.c	i2c_sda = 1;
00109c   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           ;	.line	80; i2c.c	i2c_scl = 1;
00109e   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	83; i2c.c	b = i2c_sda_in; // possible ACK bit
0010a0   6a00     clrf	0, 0                	CLRF	r0x00
0010a2   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
0010a4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           ;	.line	84; i2c.c	i2c_scl = 0;
0010a6   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	86; i2c.c	return b;
0010a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0010ac   f001
0010ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0010b0   f000
0010b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0010b4   ffd9
0010b6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_stop	code
                                           _i2c_stop:
                                           ;	.line	51; i2c.c	i2c_sda = 0; 
0011f8   9493     bcf	0x93, 0x2, 0         	BCF	_TRISBbits, 2
                                           ;	.line	53; i2c.c	i2c_scl = 1;
0011fa   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	55; i2c.c	i2c_sda = 1;
0011fc   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
0011fe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_start	code
                                           _i2c_start:
                                           ;	.line	40; i2c.c	i2c_sda = 1;
0011d2   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           ;	.line	42; i2c.c	i2c_scl = 1;
0011d4   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	44; i2c.c	i2c_sda = 0;
0011d6   9493     bcf	0x93, 0x2, 0         	BCF	_TRISBbits, 2
                                           ;	.line	46; i2c.c	i2c_scl = 0;
0011d8   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
0011da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_reset	code
                                           _i2c_reset:
                                           ;	.line	30; i2c.c	i2c_sda = 1;
0011b6   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           _00109_DS_:
                                           ;	.line	31; i2c.c	while (!i2c_sda_in){
0011b8   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
0011ba   d003     bra	0x11c2               	BRA	_00112_DS_
                                           ;	.line	32; i2c.c	i2c_scl = 0;
0011bc   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	34; i2c.c	i2c_scl = 1;
0011be   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
0011c0   d7fb     bra	0x11b8               	BRA	_00109_DS_
                                           _00112_DS_:
0011c2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__init_i2c	code
                                           _init_i2c:
                                           ;	.line	24; i2c.c	LATBbits.LATB2 = 0;
0011dc   948a     bcf	0x8a, 0x2, 0         	BCF	_LATBbits, 2
                                           ;	.line	25; i2c.c	LATBbits.LATB3 = 0;
0011de   968a     bcf	0x8a, 0x3, 0         	BCF	_LATBbits, 3
                                           ;	.line	26; i2c.c	i2c_stop();
0011e0   ecfc     call	0x11f8, 0           	CALL	_i2c_stop
0011e2   f008
0011e4   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  218 (0x00da) bytes ( 0.17%)
                                           ;           	  109 (0x006d) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Sun Nov  9 01:07:48 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           	__config 0x300001, 0xf8
                                           	__config 0x300002, 0xf2
                                           	__config 0x300003, 0xfe
                                           	__config 0x300005, 0xff
                                           	__config 0x300006, 0xfa
                                           	__config 0x300008, 0xff
                                           	__config 0x300009, 0xff
                                           	__config 0x30000a, 0xff
                                           	__config 0x30000b, 0xff
                                           	__config 0x30000c, 0xff
                                           	__config 0x30000d, 0xff
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _stack
                                           	global _stack_end
                                           	global _non_pwm_tasks_divider
                                           	global ___ivt_high_int
                                           	global _high_int
                                           	global __tmr0_handler
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _hours_meter
                                           	extern _mins_meter
                                           	extern _secs_meter
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _init_meters
                                           	extern _do_meters
                                           	extern _init_time
                                           	extern _do_time_int
                                           	extern _init_user
                                           	extern _check_for_user_input
                                           	extern _init_eeprom
                                           	extern _save_eeprom_if_needed
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           udata_main_0	udata
                                           _non_pwm_tasks_divider	res	1
                                           
                                           
                                           ustat_main_00	udata	0X0080
                                           _stack	res	31
                                           _stack_end	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main____ivt_high_int	code	0X000008
                                           ___ivt_high_int:
                                           	
000008   ef00     goto	0x1200              	goto _high_int 
00000a   f009
                                           	
                                           ; ; Starting pCode block
                                           S_main__high_int	code
                                           _high_int:
001200   b4f2     btfsc	0xf2, 0x2, 0       	btfsc _INTCON, 2 
001202   eff8     goto	0xdf0               	goto __tmr0_handler
001204   f006
001206   0010     retfie	0                 	retfie 
                                           	
                                           ; ; Starting pCode block
                                           S_main___tmr0_handler	code
                                           __tmr0_handler:
                                           ;	.line	56; main.c	SIGHANDLER(_tmr0_handler)
000df0   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
000df2   ffe5
000df4   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
000df6   ffe5
000df8   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
000dfa   ffe5
000dfc   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000dfe   ffe5
000e00   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000e02   ffe5
000e04   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
000e06   ffe5
000e08   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
000e0a   ffe5
000e0c   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000e0e   ffe5
000e10   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000e12   ffe5
000e14   0100     movlb	0                  	BANKSEL	_non_pwm_tasks_divider
                                           ;	.line	59; main.c	non_pwm_tasks_divider--;
000e16   07d3     decf	0xd3, 0x1, 0x1      	DECF	_non_pwm_tasks_divider, F, B
                                           ;	.line	60; main.c	if (!non_pwm_tasks_divider){
000e18   51d3     movf	0xd3, 0, 0x1        	MOVF	_non_pwm_tasks_divider, W, B
000e1a   e104     bnz	0xe24                	BNZ	_00114_DS_
                                           ;	.line	61; main.c	check_for_user_input();
000e1c   ec75     call	0x2ea, 0            	CALL	_check_for_user_input
000e1e   f001
                                           ;	.line	62; main.c	do_time_int();
000e20   ec27     call	0xa4e, 0            	CALL	_do_time_int
000e22   f005
                                           _00114_DS_:
                                           ;	.line	65; main.c	do_meters();
000e24   ece0     call	0xfc0, 0            	CALL	_do_meters
000e26   f007
                                           ;	.line	67; main.c	save_eeprom_if_needed();
000e28   ec55     call	0xcaa, 0            	CALL	_save_eeprom_if_needed
000e2a   f006
                                           ;	.line	70; main.c	INTCONbits.T0IF = 0;
000e2c   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
000e2e   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
000e30   fffb
000e32   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
000e34   fffa
000e36   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
000e38   ffea
000e3a   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
000e3c   ffe9
000e3e   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
000e40   fff4
000e42   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
000e44   fff3
000e46   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
000e48   ffe0
000e4a   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
000e4c   ffd8
000e4e   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
000e50   ffe8
000e52   0010     retfie	0                 	RETFIE	
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	75; main.c	OSCCON = b(01110000);
0010f6   0e70     movlw	0x70               	MOVLW	0x70
0010f8   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
                                           ;	.line	78; main.c	TRISA = 0x00;
0010fa   6a92     clrf	0x92, 0             	CLRF	_TRISA
                                           ;	.line	79; main.c	TRISB = 0x00;
0010fc   6a93     clrf	0x93, 0             	CLRF	_TRISB
                                           ;	.line	82; main.c	ADCON1 = 0x7F;
0010fe   0e7f     movlw	0x7f               	MOVLW	0x7f
001100   6ec1     movwf	0xc1, 0            	MOVWF	_ADCON1
                                           ;	.line	85; main.c	init_eeprom();
001102   ecb5     call	0xf6a, 0            	CALL	_init_eeprom
001104   f007
                                           ;	.line	86; main.c	init_time();
001106   ecf3     call	0x11e6, 0           	CALL	_init_time
001108   f008
                                           ;	.line	87; main.c	init_meters();
00110a   ec04     call	0x1208, 0           	CALL	_init_meters
00110c   f009
                                           ;	.line	88; main.c	init_user();
00110e   ec15     call	0x2a, 0             	CALL	_init_user
001110   f000
                                           ;	.line	91; main.c	INTCONbits.T0IF = 0;
001112   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	92; main.c	INTCONbits.T0IE = 1;
001114   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	93; main.c	INTCONbits.GIE = 1;
001116   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	94; main.c	T0CON = b(11001000); 
001118   0ec8     movlw	0xc8               	MOVLW	0xc8
00111a   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
                                           _00120_DS_:
                                           ;	.line	97; main.c	while (1){
00111c   d7ff     bra	0x111c               	BRA	_00120_DS_
00111e   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  156 (0x009c) bytes ( 0.12%)
                                           ;           	   78 (0x004e) words
                                           ; udata size:	   33 (0x0021) bytes (51.56%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Sun Nov  9 01:19:05 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_meters
                                           	global _do_meters
                                           	global _hours_meter
                                           	global _mins_meter
                                           	global _secs_meter
                                           	global _hours_meter_pwm
                                           	global _mins_meter_pwm
                                           	global _secs_meter_pwm
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           udata_meters_0	udata
                                           _hours_meter_pwm	res	1
                                           
                                           udata_meters_1	udata
                                           _mins_meter_pwm	res	1
                                           
                                           udata_meters_2	udata
                                           _secs_meter_pwm	res	1
                                           
                                           udata_meters_3	udata
                                           _hours_meter	res	1
                                           
                                           udata_meters_4	udata
                                           _mins_meter	res	1
                                           
                                           udata_meters_5	udata
                                           _secs_meter	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_meters__do_meters	code
                                           _do_meters:
000fc0   0100     movlb	0                  	BANKSEL	_hours_meter_pwm
                                           ;	.line	35; meters.c	hours_meter_pwm--;
000fc2   07d4     decf	0xd4, 0x1, 0x1      	DECF	_hours_meter_pwm, F, B
                                           ;	.line	36; meters.c	if (!hours_meter_pwm)
000fc4   51d4     movf	0xd4, 0, 0x1        	MOVF	_hours_meter_pwm, W, B
000fc6   e102     bnz	0xfcc                	BNZ	_00110_DS_
                                           ;	.line	37; meters.c	hours_meter_pwm = meter_range;
000fc8   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
000fca   6fd4     movwf	0xd4, 0x1          	MOVWF	_hours_meter_pwm, B
                                           _00110_DS_:
000fcc   0100     movlb	0                  	BANKSEL	_mins_meter_pwm
                                           ;	.line	38; meters.c	mins_meter_pwm--;
000fce   07d5     decf	0xd5, 0x1, 0x1      	DECF	_mins_meter_pwm, F, B
                                           ;	.line	39; meters.c	if (!mins_meter_pwm)
000fd0   51d5     movf	0xd5, 0, 0x1        	MOVF	_mins_meter_pwm, W, B
000fd2   e102     bnz	0xfd8                	BNZ	_00112_DS_
                                           ;	.line	40; meters.c	mins_meter_pwm = meter_range;
000fd4   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
000fd6   6fd5     movwf	0xd5, 0x1          	MOVWF	_mins_meter_pwm, B
                                           _00112_DS_:
000fd8   0100     movlb	0                  	BANKSEL	_secs_meter_pwm
                                           ;	.line	41; meters.c	secs_meter_pwm--;
000fda   07d6     decf	0xd6, 0x1, 0x1      	DECF	_secs_meter_pwm, F, B
                                           ;	.line	42; meters.c	if (!secs_meter_pwm)
000fdc   51d6     movf	0xd6, 0, 0x1        	MOVF	_secs_meter_pwm, W, B
000fde   e102     bnz	0xfe4                	BNZ	_00114_DS_
                                           ;	.line	43; meters.c	secs_meter_pwm = meter_range;
000fe0   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
000fe2   6fd6     movwf	0xd6, 0x1          	MOVWF	_secs_meter_pwm, B
                                           _00114_DS_:
000fe4   0100     movlb	0                  	BANKSEL	_hours_meter
                                           ;	.line	66; meters.c	if (hours_meter > hours_meter_pwm){
000fe6   51d7     movf	0xd7, 0, 0x1        	MOVF	_hours_meter, W, B
000fe8   0100     movlb	0                  	BANKSEL	_hours_meter_pwm
000fea   5dd4     subwf	0xd4, 0, 0x1       	SUBWF	_hours_meter_pwm, W, B
000fec   e202     bc	0xff2                 	BC	_00116_DS_
                                           ;	.line	67; meters.c	LATBbits.LATB4 = 0;
000fee   988a     bcf	0x8a, 0x4, 0         	BCF	_LATBbits, 4
000ff0   d001     bra	0xff4                	BRA	_00117_DS_
                                           _00116_DS_:
                                           ;	.line	69; meters.c	LATBbits.LATB4 = 1;
000ff2   888a     bsf	0x8a, 0x4, 0         	BSF	_LATBbits, 4
                                           _00117_DS_:
000ff4   0100     movlb	0                  	BANKSEL	_mins_meter
                                           ;	.line	71; meters.c	if (mins_meter > mins_meter_pwm){
000ff6   51d8     movf	0xd8, 0, 0x1        	MOVF	_mins_meter, W, B
000ff8   0100     movlb	0                  	BANKSEL	_mins_meter_pwm
000ffa   5dd5     subwf	0xd5, 0, 0x1       	SUBWF	_mins_meter_pwm, W, B
000ffc   e202     bc	0x1002                	BC	_00119_DS_
                                           ;	.line	72; meters.c	LATBbits.LATB1 = 0;
000ffe   928a     bcf	0x8a, 0x1, 0         	BCF	_LATBbits, 1
001000   d001     bra	0x1004               	BRA	_00120_DS_
                                           _00119_DS_:
                                           ;	.line	74; meters.c	LATBbits.LATB1 = 1;
001002   828a     bsf	0x8a, 0x1, 0         	BSF	_LATBbits, 1
                                           _00120_DS_:
001004   0100     movlb	0                  	BANKSEL	_secs_meter
                                           ;	.line	76; meters.c	if (secs_meter > secs_meter_pwm){
001006   51d9     movf	0xd9, 0, 0x1        	MOVF	_secs_meter, W, B
001008   0100     movlb	0                  	BANKSEL	_secs_meter_pwm
00100a   5dd6     subwf	0xd6, 0, 0x1       	SUBWF	_secs_meter_pwm, W, B
00100c   e202     bc	0x1012                	BC	_00122_DS_
                                           ;	.line	77; meters.c	LATBbits.LATB0 = 0;
00100e   908a     bcf	0x8a, 0, 0           	BCF	_LATBbits, 0
001010   d001     bra	0x1014               	BRA	_00124_DS_
                                           _00122_DS_:
                                           ;	.line	79; meters.c	LATBbits.LATB0 = 1;
001012   808a     bsf	0x8a, 0, 0           	BSF	_LATBbits, 0
                                           _00124_DS_:
001014   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_meters__init_meters	code
                                           _init_meters:
                                           ;	.line	26; meters.c	TRISBbits.TRISB0 = 0;
001208   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	27; meters.c	TRISBbits.TRISB1 = 0;
00120a   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
                                           ;	.line	28; meters.c	TRISBbits.TRISB4 = 0;
00120c   9893     bcf	0x93, 0x4, 0         	BCF	_TRISBbits, 4
00120e   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   94 (0x005e) bytes ( 0.07%)
                                           ;           	   47 (0x002f) words
                                           ; udata size:	    6 (0x0006) bytes ( 9.38%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Sun Nov  9 01:07:49 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Sun Nov  9 01:07:49 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_time
                                           	global _do_time_int
                                           	global _inc_mins
                                           	global _inc_hours
                                           	global _clear_secs
                                           	global _save_time_to_rtc
                                           	global _load_time_from_rtc
                                           	global _ratio_count_mins
                                           	global _ratio_count_secs
                                           	global _ratio_count_tics
                                           	global _osctune_shadow
                                           	global _OSCTUNE
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _hours_meter
                                           	extern _mins_meter
                                           	extern _secs_meter
                                           	extern _ds3231_time
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _trigger_save_eeprom
                                           	extern _init_ds3231
                                           	extern _read_time_from_ds3231
                                           	extern _write_time_to_ds3231
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _ratio_count_mins	db	0x18
                                           _ratio_count_secs	db	0x3c
                                           _ratio_count_tics	db	0x08
                                           _osctune_shadow	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           
                                           ustat_time_00	udata	0X0F9B
                                           _OSCTUNE	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_time__load_time_from_rtc	code
                                           _load_time_from_rtc:
                                           ;	.line	163; time.c	void load_time_from_rtc(){
000530   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000532   ffe5
000534   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000536   ffe5
000538   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00053a   ffe5
00053c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00053e   ffe5
000540   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000542   ffe5
000544   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000546   ffe5
                                           ;	.line	164; time.c	read_time_from_ds3231();
000548   ec12     call	0x824, 0            	CALL	_read_time_from_ds3231
00054a   f004
                                           ; ;multiply lit val:0x04 by variable _ds3231_time and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00054c   0100     movlb	0                  	BANKSEL	_ds3231_time
                                           ;	.line	166; time.c	secs_meter = meter_range - (ds3231_time.secs * 4);
00054e   51ca     movf	0xca, 0, 0x1        	MOVF	_ds3231_time, W, B
000550   0d04     mullw	0x4                	MULLW	0x04
000552   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000554   f000
000556   5000     movf	0, 0, 0             	MOVF	r0x00, W
000558   08f0     sublw	0xf0               	SUBLW	0xf0
00055a   0100     movlb	0                  	BANKSEL	_secs_meter
00055c   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
                                           ; ;multiply lit val:0x04 by variable (_ds3231_time + 1) and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00055e   0100     movlb	0                  	BANKSEL	(_ds3231_time + 1)
                                           ;	.line	167; time.c	mins_meter = meter_range - (ds3231_time.mins * 4);
000560   51cb     movf	0xcb, 0, 0x1        	MOVF	(_ds3231_time + 1), W, B
000562   0d04     mullw	0x4                	MULLW	0x04
000564   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000566   f000
000568   5000     movf	0, 0, 0             	MOVF	r0x00, W
00056a   08f0     sublw	0xf0               	SUBLW	0xf0
00056c   0100     movlb	0                  	BANKSEL	_mins_meter
00056e   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
                                           ; ;multiply lit val:0x0a by variable (_ds3231_time + 2) and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000570   0100     movlb	0                  	BANKSEL	(_ds3231_time + 2)
                                           ;	.line	168; time.c	hours_meter = meter_range - (ds3231_time.hours * 10);
000572   51cc     movf	0xcc, 0, 0x1        	MOVF	(_ds3231_time + 2), W, B
000574   0d0a     mullw	0xa                	MULLW	0x0a
000576   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000578   f000
00057a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00057c   08f0     sublw	0xf0               	SUBLW	0xf0
00057e   0100     movlb	0                  	BANKSEL	_hours_meter
000580   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
                                           ;	.line	172; time.c	mins_meter -= (meter_range - secs_meter) / num_time_mins;
000582   c0d9     movff	0xd9, 0            	MOVFF	_secs_meter, r0x00
000584   f000
000586   6a01     clrf	0x1, 0              	CLRF	r0x01
000588   5000     movf	0, 0, 0             	MOVF	r0x00, W
00058a   08f0     sublw	0xf0               	SUBLW	0xf0
00058c   6e00     movwf	0, 0               	MOVWF	r0x00
00058e   0e00     movlw	0                  	MOVLW	0x00
000590   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
000592   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000594   0e3c     movlw	0x3c               	MOVLW	0x3c
000596   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000598   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00059a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00059c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00059e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005a0   ec25     call	0x64a, 0            	CALL	__divsint
0005a2   f003
0005a4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0005a6   0e04     movlw	0x4                	MOVLW	0x04
0005a8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0005aa   c0d8     movff	0xd8, 0x3          	MOVFF	_mins_meter, r0x03
0005ac   f003
0005ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005b0   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0005b2   0100     movlb	0                  	BANKSEL	_mins_meter
0005b4   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
                                           ;	.line	173; time.c	hours_meter -= (meter_range - mins_meter) / num_time_hours;
0005b6   c0d8     movff	0xd8, 0x2          	MOVFF	_mins_meter, r0x02
0005b8   f002
0005ba   6a03     clrf	0x3, 0              	CLRF	r0x03
0005bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005be   08f0     sublw	0xf0               	SUBLW	0xf0
0005c0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0005c2   0e00     movlw	0                  	MOVLW	0x00
0005c4   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
0005c6   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
0005c8   0e18     movlw	0x18               	MOVLW	0x18
0005ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005cc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005d4   ec25     call	0x64a, 0            	CALL	__divsint
0005d6   f003
0005d8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005da   0e04     movlw	0x4                	MOVLW	0x04
0005dc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0005de   c0d7     movff	0xd7, 0x5          	MOVFF	_hours_meter, r0x05
0005e0   f005
0005e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0005e4   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
0005e6   0100     movlb	0                  	BANKSEL	_hours_meter
0005e8   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
                                           ;	.line	176; time.c	ratio_count_tics = num_time_tics;
0005ea   0e08     movlw	0x8                	MOVLW	0x08
0005ec   0100     movlb	0                  	BANKSEL	_ratio_count_tics
0005ee   6fc7     movwf	0xc7, 0x1          	MOVWF	_ratio_count_tics, B
                                           ;	.line	177; time.c	ratio_count_secs = num_time_mins - ((meter_range - secs_meter) % num_time_mins);
0005f0   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
0005f2   0e3c     movlw	0x3c               	MOVLW	0x3c
0005f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005f6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0005f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005fe   eca0     call	0x740, 0            	CALL	__modsint
000600   f003
000602   6e00     movwf	0, 0               	MOVWF	r0x00
000604   0e04     movlw	0x4                	MOVLW	0x04
000606   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000608   5000     movf	0, 0, 0             	MOVF	r0x00, W
00060a   083c     sublw	0x3c               	SUBLW	0x3c
00060c   0100     movlb	0                  	BANKSEL	_ratio_count_secs
00060e   6fc6     movwf	0xc6, 0x1          	MOVWF	_ratio_count_secs, B
                                           ;	.line	178; time.c	ratio_count_mins = num_time_hours - ((meter_range - mins_meter) % num_time_hours);
000610   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000612   0e18     movlw	0x18               	MOVLW	0x18
000614   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000616   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000618   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00061a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00061c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00061e   eca0     call	0x740, 0            	CALL	__modsint
000620   f003
000622   6e00     movwf	0, 0               	MOVWF	r0x00
000624   0e04     movlw	0x4                	MOVLW	0x04
000626   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000628   5000     movf	0, 0, 0             	MOVF	r0x00, W
00062a   0818     sublw	0x18               	SUBLW	0x18
00062c   0100     movlb	0                  	BANKSEL	_ratio_count_mins
00062e   6fc5     movwf	0xc5, 0x1          	MOVWF	_ratio_count_mins, B
000630   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000632   f005
000634   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000636   f004
000638   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00063a   f003
00063c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00063e   f002
000640   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000642   f001
000644   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000646   f000
000648   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__save_time_to_rtc	code
                                           _save_time_to_rtc:
                                           ;	.line	155; time.c	void save_time_to_rtc(){
000af6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000af8   ffe5
000afa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000afc   ffe5
                                           ;	.line	156; time.c	ds3231_time.hours = (meter_range - hours_meter) / 10;
000afe   c0d7     movff	0xd7, 0            	MOVFF	_hours_meter, r0x00
000b00   f000
000b02   6a01     clrf	0x1, 0              	CLRF	r0x01
000b04   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b06   08f0     sublw	0xf0               	SUBLW	0xf0
000b08   6e00     movwf	0, 0               	MOVWF	r0x00
000b0a   0e00     movlw	0                  	MOVLW	0x00
000b0c   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
000b0e   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000b10   0e0a     movlw	0xa                	MOVLW	0x0a
000b12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b14   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b18   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b1c   ec25     call	0x64a, 0            	CALL	__divsint
000b1e   f003
000b20   6e00     movwf	0, 0               	MOVWF	r0x00
000b22   0e04     movlw	0x4                	MOVLW	0x04
000b24   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000b26   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b28   0100     movlb	0                  	BANKSEL	(_ds3231_time + 2)
000b2a   6fcc     movwf	0xcc, 0x1          	MOVWF	(_ds3231_time + 2), B
                                           ;	.line	157; time.c	ds3231_time.mins = (meter_range - mins_meter) / 4;
000b2c   c0d8     movff	0xd8, 0            	MOVFF	_mins_meter, r0x00
000b2e   f000
000b30   6a01     clrf	0x1, 0              	CLRF	r0x01
000b32   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b34   08f0     sublw	0xf0               	SUBLW	0xf0
000b36   6e00     movwf	0, 0               	MOVWF	r0x00
000b38   0e00     movlw	0                  	MOVLW	0x00
000b3a   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
000b3c   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000b3e   0e04     movlw	0x4                	MOVLW	0x04
000b40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b42   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b46   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4a   ec25     call	0x64a, 0            	CALL	__divsint
000b4c   f003
000b4e   6e00     movwf	0, 0               	MOVWF	r0x00
000b50   0e04     movlw	0x4                	MOVLW	0x04
000b52   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000b54   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b56   0100     movlb	0                  	BANKSEL	(_ds3231_time + 1)
000b58   6fcb     movwf	0xcb, 0x1          	MOVWF	(_ds3231_time + 1), B
                                           ;	.line	158; time.c	ds3231_time.secs = (meter_range - secs_meter) / 4;
000b5a   c0d9     movff	0xd9, 0            	MOVFF	_secs_meter, r0x00
000b5c   f000
000b5e   6a01     clrf	0x1, 0              	CLRF	r0x01
000b60   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b62   08f0     sublw	0xf0               	SUBLW	0xf0
000b64   6e00     movwf	0, 0               	MOVWF	r0x00
000b66   0e00     movlw	0                  	MOVLW	0x00
000b68   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
000b6a   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000b6c   0e04     movlw	0x4                	MOVLW	0x04
000b6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b70   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b74   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b78   ec25     call	0x64a, 0            	CALL	__divsint
000b7a   f003
000b7c   6e00     movwf	0, 0               	MOVWF	r0x00
000b7e   0e04     movlw	0x4                	MOVLW	0x04
000b80   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000b82   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b84   0100     movlb	0                  	BANKSEL	_ds3231_time
000b86   6fca     movwf	0xca, 0x1          	MOVWF	_ds3231_time, B
                                           ;	.line	160; time.c	write_time_to_ds3231();
000b88   ec5a     call	0xeb4, 0            	CALL	_write_time_to_ds3231
000b8a   f007
000b8c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000b8e   f001
000b90   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000b92   f000
000b94   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__clear_secs	code
                                           _clear_secs:
                                           ;	.line	146; time.c	void clear_secs(){
001016   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001018   ffe5
00101a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00101c   ffe5
                                           ;	.line	148; time.c	mins_meter += ((meter_range - secs_meter) / num_time_secs);
00101e   c0d9     movff	0xd9, 0            	MOVFF	_secs_meter, r0x00
001020   f000
001022   6a01     clrf	0x1, 0              	CLRF	r0x01
001024   5000     movf	0, 0, 0             	MOVF	r0x00, W
001026   08f0     sublw	0xf0               	SUBLW	0xf0
001028   6e00     movwf	0, 0               	MOVWF	r0x00
00102a   0e00     movlw	0                  	MOVLW	0x00
00102c   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
00102e   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
001030   0e3c     movlw	0x3c               	MOVLW	0x3c
001032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001034   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001036   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001038   5000     movf	0, 0, 0             	MOVF	r0x00, W
00103a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00103c   ec25     call	0x64a, 0            	CALL	__divsint
00103e   f003
001040   6e00     movwf	0, 0               	MOVWF	r0x00
001042   0e04     movlw	0x4                	MOVLW	0x04
001044   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001046   c0d8     movff	0xd8, 0x1          	MOVFF	_mins_meter, r0x01
001048   f001
00104a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00104c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00104e   0100     movlb	0                  	BANKSEL	_mins_meter
001050   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
                                           ;	.line	151; time.c	ratio_count_secs = num_time_secs;
001052   0e3c     movlw	0x3c               	MOVLW	0x3c
001054   0100     movlb	0                  	BANKSEL	_ratio_count_secs
001056   6fc6     movwf	0xc6, 0x1          	MOVWF	_ratio_count_secs, B
                                           ;	.line	152; time.c	secs_meter = meter_range;
001058   0ef0     movlw	0xf0               	MOVLW	0xf0
00105a   0100     movlb	0                  	BANKSEL	_secs_meter
00105c   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
00105e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001060   f001
001062   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001064   f000
001066   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__inc_hours	code
                                           _inc_hours:
0011a4   0100     movlb	0                  	BANKSEL	_hours_meter
                                           ;	.line	135; time.c	hours_meter--;
0011a6   07d7     decf	0xd7, 0x1, 0x1      	DECF	_hours_meter, F, B
                                           ;	.line	136; time.c	if (!hours_meter){
0011a8   51d7     movf	0xd7, 0, 0x1        	MOVF	_hours_meter, W, B
0011aa   e104     bnz	0x11b4               	BNZ	_00146_DS_
                                           ;	.line	137; time.c	hours_meter = meter_range;
0011ac   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
0011ae   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
                                           ;	.line	140; time.c	save_metrics();
0011b0   ec0e     call	0x121c, 0           	CALL	_trigger_save_eeprom
0011b2   f009
                                           _00146_DS_:
0011b4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__inc_mins	code
                                           _inc_mins:
001142   0100     movlb	0                  	BANKSEL	_mins_meter
                                           ;	.line	123; time.c	mins_meter--;
001144   07d8     decf	0xd8, 0x1, 0x1      	DECF	_mins_meter, F, B
                                           ;	.line	124; time.c	if (!mins_meter)
001146   51d8     movf	0xd8, 0, 0x1        	MOVF	_mins_meter, W, B
001148   e102     bnz	0x114e               	BNZ	_00136_DS_
                                           ;	.line	125; time.c	mins_meter = meter_range;
00114a   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
00114c   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
                                           _00136_DS_:
00114e   0100     movlb	0                  	BANKSEL	_ratio_count_mins
                                           ;	.line	126; time.c	ratio_count_mins--;
001150   07c5     decf	0xc5, 0x1, 0x1      	DECF	_ratio_count_mins, F, B
                                           ;	.line	127; time.c	if (!ratio_count_mins){
001152   51c5     movf	0xc5, 0, 0x1        	MOVF	_ratio_count_mins, W, B
001154   e104     bnz	0x115e               	BNZ	_00139_DS_
                                           ;	.line	128; time.c	ratio_count_mins = num_time_hours;
001156   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
001158   6fc5     movwf	0xc5, 0x1          	MOVWF	_ratio_count_mins, B
                                           ;	.line	130; time.c	inc_hours();
00115a   ecd2     call	0x11a4, 0           	CALL	_inc_hours
00115c   f008
                                           _00139_DS_:
00115e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__do_time_int	code
                                           _do_time_int:
                                           ;	.line	70; time.c	void do_time_int(){
000a4e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000a50   ffe5
000a52   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000a54   ffe5
000a56   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000a58   ffe5
000a5a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000a5c   ffe5
000a5e   0100     movlb	0                  	BANKSEL	_ratio_count_tics
                                           ;	.line	73; time.c	ratio_count_tics--;
000a60   07c7     decf	0xc7, 0x1, 0x1      	DECF	_ratio_count_tics, F, B
                                           ;	.line	74; time.c	if (!ratio_count_tics){
000a62   51c7     movf	0xc7, 0, 0x1        	MOVF	_ratio_count_tics, W, B
000a64   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
000a66   d03e     bra	0xae4                	BRA	_00122_DS_
                                           ;	.line	75; time.c	ratio_count_tics = num_time_tics;
000a68   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
000a6a   6fc7     movwf	0xc7, 0x1          	MOVWF	_ratio_count_tics, B
000a6c   0100     movlb	0                  	BANKSEL	_secs_meter
                                           ;	.line	78; time.c	if (!(secs_meter % 4))
000a6e   51d9     movf	0xd9, 0, 0x1        	MOVF	_secs_meter, W, B
000a70   0b03     andlw	0x3                	ANDLW	0x03
000a72   e118     bnz	0xaa4                	BNZ	_00110_DS_
                                           ;	.line	79; time.c	inc_metric_running_time();
000a74   c0a0     movff	0xa0, 0            	MOVFF	_eeprom_data, r0x00
000a76   f000
000a78   c0a1     movff	0xa1, 0x1          	MOVFF	(_eeprom_data + 1), r0x01
000a7a   f001
000a7c   c0a2     movff	0xa2, 0x2          	MOVFF	(_eeprom_data + 2), r0x02
000a7e   f002
000a80   c0a3     movff	0xa3, 0x3          	MOVFF	(_eeprom_data + 3), r0x03
000a82   f003
000a84   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a86   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a88   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a8a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a8c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000a8e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a90   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000a92   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a94   0100     movlb	0                  	BANKSEL	_eeprom_data
000a96   6fa0     movwf	0xa0, 0x1          	MOVWF	_eeprom_data, B
000a98   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000a9a   6fa1     movwf	0xa1, 0x1          	MOVWF	(_eeprom_data + 1), B
000a9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000a9e   6fa2     movwf	0xa2, 0x1          	MOVWF	(_eeprom_data + 2), B
000aa0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000aa2   6fa3     movwf	0xa3, 0x1          	MOVWF	(_eeprom_data + 3), B
                                           _00110_DS_:
000aa4   0100     movlb	0                  	BANKSEL	_secs_meter
                                           ;	.line	81; time.c	secs_meter--;
000aa6   07d9     decf	0xd9, 0x1, 0x1      	DECF	_secs_meter, F, B
                                           ;	.line	82; time.c	if (!secs_meter){
000aa8   51d9     movf	0xd9, 0, 0x1        	MOVF	_secs_meter, W, B
000aaa   e114     bnz	0xad4                	BNZ	_00117_DS_
                                           ;	.line	83; time.c	secs_meter = meter_range;
000aac   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
000aae   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
                                           ;	.line	96; time.c	read_time_from_ds3231();
000ab0   ec12     call	0x824, 0            	CALL	_read_time_from_ds3231
000ab2   f004
                                           ;	.line	100; time.c	if (ds3231_time.secs){
000ab4   c0ca     movff	0xca, 0            	MOVFF	_ds3231_time, r0x00
000ab6   f000
000ab8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000aba   e00c     bz	0xad4                 	BZ	_00117_DS_
                                           ;	.line	101; time.c	if (ds3231_time.secs > num_time_secs / 2){
000abc   0e1f     movlw	0x1f               	MOVLW	0x1f
000abe   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000ac0   e305     bnc	0xacc                	BNC	_00112_DS_
000ac2   0100     movlb	0                  	BANKSEL	_osctune_shadow
                                           ;	.line	103; time.c	osctune_shadow--;
000ac4   07c8     decf	0xc8, 0x1, 0x1      	DECF	_osctune_shadow, F, B
                                           ;	.line	104; time.c	OSCTUNE = osctune_shadow;
000ac6   c0c8     movff	0xc8, 0xf9b        	MOVFF	_osctune_shadow, _OSCTUNE
000ac8   ff9b
000aca   d004     bra	0xad4                	BRA	_00117_DS_
                                           _00112_DS_:
000acc   0100     movlb	0                  	BANKSEL	_osctune_shadow
                                           ;	.line	107; time.c	osctune_shadow++;
000ace   2bc8     incf	0xc8, 0x1, 0x1      	INCF	_osctune_shadow, F, B
                                           ;	.line	108; time.c	OSCTUNE = osctune_shadow;
000ad0   c0c8     movff	0xc8, 0xf9b        	MOVFF	_osctune_shadow, _OSCTUNE
000ad2   ff9b
                                           _00117_DS_:
000ad4   0100     movlb	0                  	BANKSEL	_ratio_count_secs
                                           ;	.line	113; time.c	ratio_count_secs--;
000ad6   07c6     decf	0xc6, 0x1, 0x1      	DECF	_ratio_count_secs, F, B
                                           ;	.line	114; time.c	if (!ratio_count_secs){
000ad8   51c6     movf	0xc6, 0, 0x1        	MOVF	_ratio_count_secs, W, B
000ada   e104     bnz	0xae4                	BNZ	_00122_DS_
                                           ;	.line	115; time.c	ratio_count_secs = num_time_mins;
000adc   0e3c     movlw	0x3c               	MOVLW	0x3c
                                           ; removed redundant BANKSEL
000ade   6fc6     movwf	0xc6, 0x1          	MOVWF	_ratio_count_secs, B
                                           ;	.line	117; time.c	inc_mins();
000ae0   eca1     call	0x1142, 0           	CALL	_inc_mins
000ae2   f008
                                           _00122_DS_:
000ae4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000ae6   f003
000ae8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000aea   f002
000aec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aee   f001
000af0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000af2   f000
000af4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__init_time	code
                                           _init_time:
                                           ;	.line	54; time.c	init_ds3231();
0011e6   ec08     call	0x1210, 0           	CALL	_init_ds3231
0011e8   f009
                                           ;	.line	55; time.c	load_time_from_rtc();
0011ea   ec98     call	0x530, 0            	CALL	_load_time_from_rtc
0011ec   f002
0011ee   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  750 (0x02ee) bytes ( 0.57%)
                                           ;           	  375 (0x0177) words
                                           ; udata size:	    1 (0x0001) bytes ( 1.56%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Sun Nov  9 01:20:33 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _silly_hour_display
                                           	global _init_user
                                           	global _check_for_user_input
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _ds3231_time
                                           	extern _hours_meter
                                           	extern _mins_meter
                                           	extern _secs_meter
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _delay10tcy
                                           	extern _save_time_to_rtc
                                           	extern _clear_secs
                                           	extern _inc_hours
                                           	extern _inc_mins
                                           	extern _save_eeprom_if_needed
                                           	extern _trigger_save_eeprom
                                           	extern _do_meters
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           
                                           udata_user_0	udata
                                           _silly_hour_display	res	1
                                           
                                           udata_user_1	udata
                                           _hours_debounce	res	2
                                           
                                           udata_user_2	udata
                                           _mins_debounce	res	2
                                           
                                           udata_user_3	udata
                                           _secs_debounce	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_user__check_for_user_input	code
                                           _check_for_user_input:
                                           ;	.line	107; user.c	void check_for_user_input(){
0002ea   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0002ec   ffe5
0002ee   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0002f0   ffe5
0002f2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0002f4   ffe5
0002f6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0002f8   ffe5
                                           ;	.line	108; user.c	if (debounce_just_pressed(hours_debounce,hours_switch_raw)){
0002fa   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
0002fc   d041     bra	0x380                	BRA	_00199_DS_
0002fe   0e7c     movlw	0x7c               	MOVLW	0x7c
000300   0100     movlb	0                  	BANKSEL	_hours_debounce
000302   5dcd     subwf	0xcd, 0, 0x1       	SUBWF	_hours_debounce, W, B
000304   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000306   d03c     bra	0x380                	BRA	_00199_DS_
000308   6a00     clrf	0, 0                	CLRF	r0x00
00030a   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
00030c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00030e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000310   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000312   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000314   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000316   6a00     clrf	0, 0                	CLRF	r0x00
000318   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
00031a   51ce     movf	0xce, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
00031c   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00031e   e030     bz	0x380                 	BZ	_00199_DS_
                                           ;	.line	109; user.c	inc_one_hour();
000320   ecd2     call	0x11a4, 0           	CALL	_inc_hours
000322   f008
000324   ecd2     call	0x11a4, 0           	CALL	_inc_hours
000326   f008
000328   ecd2     call	0x11a4, 0           	CALL	_inc_hours
00032a   f008
00032c   ecd2     call	0x11a4, 0           	CALL	_inc_hours
00032e   f008
000330   ecd2     call	0x11a4, 0           	CALL	_inc_hours
000332   f008
000334   ecd2     call	0x11a4, 0           	CALL	_inc_hours
000336   f008
000338   ecd2     call	0x11a4, 0           	CALL	_inc_hours
00033a   f008
00033c   ecd2     call	0x11a4, 0           	CALL	_inc_hours
00033e   f008
000340   ecd2     call	0x11a4, 0           	CALL	_inc_hours
000342   f008
000344   ecd2     call	0x11a4, 0           	CALL	_inc_hours
000346   f008
                                           ;	.line	110; user.c	inc_metric_sw_hours();
000348   ec0e     call	0x121c, 0           	CALL	_trigger_save_eeprom
00034a   f009
00034c   c0a4     movff	0xa4, 0            	MOVFF	(_eeprom_data + 4), r0x00
00034e   f000
000350   c0a5     movff	0xa5, 0x1          	MOVFF	(_eeprom_data + 5), r0x01
000352   f001
000354   c0a6     movff	0xa6, 0x2          	MOVFF	(_eeprom_data + 6), r0x02
000356   f002
000358   c0a7     movff	0xa7, 0x3          	MOVFF	(_eeprom_data + 7), r0x03
00035a   f003
00035c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00035e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000360   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000362   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000364   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000366   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000368   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00036a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00036c   0100     movlb	0                  	BANKSEL	(_eeprom_data + 4)
00036e   6fa4     movwf	0xa4, 0x1          	MOVWF	(_eeprom_data + 4), B
000370   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000372   6fa5     movwf	0xa5, 0x1          	MOVWF	(_eeprom_data + 5), B
000374   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000376   6fa6     movwf	0xa6, 0x1          	MOVWF	(_eeprom_data + 6), B
000378   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
00037a   6fa7     movwf	0xa7, 0x1          	MOVWF	(_eeprom_data + 7), B
                                           ;	.line	111; user.c	save_time_to_rtc();
00037c   ec7b     call	0xaf6, 0            	CALL	_save_time_to_rtc
00037e   f005
                                           _00199_DS_:
                                           ;	.line	118; user.c	if (debounce_just_pressed(mins_debounce,mins_switch_raw)){
000380   b480     btfsc	0x80, 0x2, 0       	BTFSC	_PORTAbits, 2
000382   d034     bra	0x3ec                	BRA	_00203_DS_
000384   0e7c     movlw	0x7c               	MOVLW	0x7c
000386   0100     movlb	0                  	BANKSEL	_mins_debounce
000388   5dcf     subwf	0xcf, 0, 0x1       	SUBWF	_mins_debounce, W, B
00038a   e230     bc	0x3ec                 	BC	_00203_DS_
00038c   6a00     clrf	0, 0                	CLRF	r0x00
00038e   b480     btfsc	0x80, 0x2, 0       	BTFSC	_PORTAbits, 2
000390   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000392   5000     movf	0, 0, 0             	MOVF	r0x00, W
000394   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000396   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000398   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00039a   6a00     clrf	0, 0                	CLRF	r0x00
00039c   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
00039e   51d0     movf	0xd0, 0, 0x1        	MOVF	(_mins_debounce + 1), W, B
0003a0   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0003a2   e024     bz	0x3ec                 	BZ	_00203_DS_
                                           ;	.line	119; user.c	inc_one_minute();
0003a4   eca1     call	0x1142, 0           	CALL	_inc_mins
0003a6   f008
0003a8   eca1     call	0x1142, 0           	CALL	_inc_mins
0003aa   f008
0003ac   eca1     call	0x1142, 0           	CALL	_inc_mins
0003ae   f008
0003b0   eca1     call	0x1142, 0           	CALL	_inc_mins
0003b2   f008
                                           ;	.line	120; user.c	inc_metric_sw_mins();
0003b4   ec0e     call	0x121c, 0           	CALL	_trigger_save_eeprom
0003b6   f009
0003b8   c0a8     movff	0xa8, 0            	MOVFF	(_eeprom_data + 8), r0x00
0003ba   f000
0003bc   c0a9     movff	0xa9, 0x1          	MOVFF	(_eeprom_data + 9), r0x01
0003be   f001
0003c0   c0aa     movff	0xaa, 0x2          	MOVFF	(_eeprom_data + 10), r0x02
0003c2   f002
0003c4   c0ab     movff	0xab, 0x3          	MOVFF	(_eeprom_data + 11), r0x03
0003c6   f003
0003c8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0003ca   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003cc   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0003ce   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003d0   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0003d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003d4   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0003d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003d8   0100     movlb	0                  	BANKSEL	(_eeprom_data + 8)
0003da   6fa8     movwf	0xa8, 0x1          	MOVWF	(_eeprom_data + 8), B
0003dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0003de   6fa9     movwf	0xa9, 0x1          	MOVWF	(_eeprom_data + 9), B
0003e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
0003e2   6faa     movwf	0xaa, 0x1          	MOVWF	(_eeprom_data + 10), B
0003e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0003e6   6fab     movwf	0xab, 0x1          	MOVWF	(_eeprom_data + 11), B
                                           ;	.line	121; user.c	save_time_to_rtc();
0003e8   ec7b     call	0xaf6, 0            	CALL	_save_time_to_rtc
0003ea   f005
                                           _00203_DS_:
                                           ;	.line	124; user.c	if (debounce_just_pressed(secs_debounce,secs_switch_raw)){
0003ec   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0003ee   d02e     bra	0x44c                	BRA	_00207_DS_
0003f0   0e7c     movlw	0x7c               	MOVLW	0x7c
0003f2   0100     movlb	0                  	BANKSEL	_secs_debounce
0003f4   5dd1     subwf	0xd1, 0, 0x1       	SUBWF	_secs_debounce, W, B
0003f6   e22a     bc	0x44c                 	BC	_00207_DS_
0003f8   6a00     clrf	0, 0                	CLRF	r0x00
0003fa   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0003fc   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0003fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
000400   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000402   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000404   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000406   6a00     clrf	0, 0                	CLRF	r0x00
000408   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
00040a   51d2     movf	0xd2, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
00040c   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00040e   e01e     bz	0x44c                 	BZ	_00207_DS_
                                           ;	.line	125; user.c	clear_secs();
000410   ec0b     call	0x1016, 0           	CALL	_clear_secs
000412   f008
                                           ;	.line	126; user.c	inc_metric_sw_secs();
000414   ec0e     call	0x121c, 0           	CALL	_trigger_save_eeprom
000416   f009
000418   c0ac     movff	0xac, 0            	MOVFF	(_eeprom_data + 12), r0x00
00041a   f000
00041c   c0ad     movff	0xad, 0x1          	MOVFF	(_eeprom_data + 13), r0x01
00041e   f001
000420   c0ae     movff	0xae, 0x2          	MOVFF	(_eeprom_data + 14), r0x02
000422   f002
000424   c0af     movff	0xaf, 0x3          	MOVFF	(_eeprom_data + 15), r0x03
000426   f003
000428   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00042a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00042c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00042e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000430   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000432   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000434   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000436   5000     movf	0, 0, 0             	MOVF	r0x00, W
000438   0100     movlb	0                  	BANKSEL	(_eeprom_data + 12)
00043a   6fac     movwf	0xac, 0x1          	MOVWF	(_eeprom_data + 12), B
00043c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00043e   6fad     movwf	0xad, 0x1          	MOVWF	(_eeprom_data + 13), B
000440   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000442   6fae     movwf	0xae, 0x1          	MOVWF	(_eeprom_data + 14), B
000444   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000446   6faf     movwf	0xaf, 0x1          	MOVWF	(_eeprom_data + 15), B
                                           ;	.line	127; user.c	save_time_to_rtc();
000448   ec7b     call	0xaf6, 0            	CALL	_save_time_to_rtc
00044a   f005
                                           _00207_DS_:
                                           ;	.line	130; user.c	debounce_add_sample(hours_debounce,hours_switch_raw);
00044c   6a00     clrf	0, 0                	CLRF	r0x00
00044e   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
000450   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000452   5000     movf	0, 0, 0             	MOVF	r0x00, W
000454   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000456   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000458   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00045a   6a00     clrf	0, 0                	CLRF	r0x00
00045c   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00045e   0100     movlb	0                  	BANKSEL	(_hours_debounce + 1)
000460   51ce     movf	0xce, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
000462   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
000464   e00e     bz	0x482                 	BZ	_00211_DS_
000466   0e7f     movlw	0x7f               	MOVLW	0x7f
000468   0100     movlb	0                  	BANKSEL	_hours_debounce
00046a   6fcd     movwf	0xcd, 0x1          	MOVWF	_hours_debounce, B
00046c   6a00     clrf	0, 0                	CLRF	r0x00
00046e   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
000470   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000472   5000     movf	0, 0, 0             	MOVF	r0x00, W
000474   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000476   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000478   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00047a   6a00     clrf	0, 0                	CLRF	r0x00
00047c   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00047e   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000480   6fce     movwf	0xce, 0x1          	MOVWF	(_hours_debounce + 1), B
                                           _00211_DS_:
000482   c0cd     movff	0xcd, 0            	MOVFF	_hours_debounce, r0x00
000484   f000
000486   5000     movf	0, 0, 0             	MOVF	r0x00, W
000488   e004     bz	0x492                 	BZ	_00213_DS_
00048a   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00048c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00048e   0100     movlb	0                  	BANKSEL	_hours_debounce
000490   6fcd     movwf	0xcd, 0x1          	MOVWF	_hours_debounce, B
                                           _00213_DS_:
                                           ;	.line	131; user.c	debounce_add_sample(mins_debounce,mins_switch_raw);
000492   6a00     clrf	0, 0                	CLRF	r0x00
000494   b480     btfsc	0x80, 0x2, 0       	BTFSC	_PORTAbits, 2
000496   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000498   5000     movf	0, 0, 0             	MOVF	r0x00, W
00049a   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00049c   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00049e   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0004a0   6a00     clrf	0, 0                	CLRF	r0x00
0004a2   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0004a4   0100     movlb	0                  	BANKSEL	(_mins_debounce + 1)
0004a6   51d0     movf	0xd0, 0, 0x1        	MOVF	(_mins_debounce + 1), W, B
0004a8   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0004aa   e00e     bz	0x4c8                 	BZ	_00215_DS_
0004ac   0e7f     movlw	0x7f               	MOVLW	0x7f
0004ae   0100     movlb	0                  	BANKSEL	_mins_debounce
0004b0   6fcf     movwf	0xcf, 0x1          	MOVWF	_mins_debounce, B
0004b2   6a00     clrf	0, 0                	CLRF	r0x00
0004b4   b480     btfsc	0x80, 0x2, 0       	BTFSC	_PORTAbits, 2
0004b6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0004b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004ba   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0004bc   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0004be   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0004c0   6a00     clrf	0, 0                	CLRF	r0x00
0004c2   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0004c4   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0004c6   6fd0     movwf	0xd0, 0x1          	MOVWF	(_mins_debounce + 1), B
                                           _00215_DS_:
0004c8   c0cf     movff	0xcf, 0            	MOVFF	_mins_debounce, r0x00
0004ca   f000
0004cc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004ce   e004     bz	0x4d8                 	BZ	_00217_DS_
0004d0   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0004d2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004d4   0100     movlb	0                  	BANKSEL	_mins_debounce
0004d6   6fcf     movwf	0xcf, 0x1          	MOVWF	_mins_debounce, B
                                           _00217_DS_:
                                           ;	.line	132; user.c	debounce_add_sample(secs_debounce,secs_switch_raw);
0004d8   6a00     clrf	0, 0                	CLRF	r0x00
0004da   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0004dc   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0004de   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004e0   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0004e2   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0004e4   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0004e6   6a00     clrf	0, 0                	CLRF	r0x00
0004e8   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0004ea   0100     movlb	0                  	BANKSEL	(_secs_debounce + 1)
0004ec   51d2     movf	0xd2, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
0004ee   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0004f0   e00e     bz	0x50e                 	BZ	_00219_DS_
0004f2   0e7f     movlw	0x7f               	MOVLW	0x7f
0004f4   0100     movlb	0                  	BANKSEL	_secs_debounce
0004f6   6fd1     movwf	0xd1, 0x1          	MOVWF	_secs_debounce, B
0004f8   6a00     clrf	0, 0                	CLRF	r0x00
0004fa   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0004fc   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0004fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
000500   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000502   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000504   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000506   6a00     clrf	0, 0                	CLRF	r0x00
000508   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00050a   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
00050c   6fd2     movwf	0xd2, 0x1          	MOVWF	(_secs_debounce + 1), B
                                           _00219_DS_:
00050e   c0d1     movff	0xd1, 0            	MOVFF	_secs_debounce, r0x00
000510   f000
000512   5000     movf	0, 0, 0             	MOVF	r0x00, W
000514   e004     bz	0x51e                 	BZ	_00222_DS_
000516   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000518   5000     movf	0, 0, 0             	MOVF	r0x00, W
00051a   0100     movlb	0                  	BANKSEL	_secs_debounce
00051c   6fd1     movwf	0xd1, 0x1          	MOVWF	_secs_debounce, B
                                           _00222_DS_:
00051e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000520   f003
000522   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000524   f002
000526   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000528   f001
00052a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00052c   f000
00052e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_user__init_user	code
                                           _init_user:
                                           ;	.line	38; user.c	void init_user(){
00002a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00002c   ffe5
00002e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000030   ffe5
000032   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000034   ffe5
000036   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000038   ffe5
00003a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00003c   ffe5
                                           ;	.line	41; user.c	TRISAbits.TRISA0 = 1;
00003e   8092     bsf	0x92, 0, 0           	BSF	_TRISAbits, 0
                                           ;	.line	42; user.c	TRISAbits.TRISA2 = 1;
000040   8492     bsf	0x92, 0x2, 0         	BSF	_TRISAbits, 2
                                           ;	.line	43; user.c	TRISAbits.TRISA7 = 1;
000042   8e92     bsf	0x92, 0x7, 0         	BSF	_TRISAbits, 7
                                           ;	.line	45; user.c	if (hours_switch_raw || mins_switch_raw || secs_switch_raw){
000044   a080     btfss	0x80, 0, 0         	BTFSS	_PORTAbits, 0
000046   d004     bra	0x50                 	BRA	_00149_DS_
000048   a480     btfss	0x80, 0x2, 0       	BTFSS	_PORTAbits, 2
00004a   d002     bra	0x50                 	BRA	_00149_DS_
00004c   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
00004e   d142     bra	0x2d4                	BRA	_00153_DS_
                                           _00149_DS_:
                                           ;	.line	47; user.c	inc_metric_meta();
000050   ec0e     call	0x121c, 0           	CALL	_trigger_save_eeprom
000052   f009
000054   c0b8     movff	0xb8, 0            	MOVFF	(_eeprom_data + 24), r0x00
000056   f000
000058   c0b9     movff	0xb9, 0x1          	MOVFF	(_eeprom_data + 25), r0x01
00005a   f001
00005c   c0ba     movff	0xba, 0x2          	MOVFF	(_eeprom_data + 26), r0x02
00005e   f002
000060   c0bb     movff	0xbb, 0x3          	MOVFF	(_eeprom_data + 27), r0x03
000062   f003
000064   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000066   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000068   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00006a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00006c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00006e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000070   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000072   5000     movf	0, 0, 0             	MOVF	r0x00, W
000074   0100     movlb	0                  	BANKSEL	(_eeprom_data + 24)
000076   6fb8     movwf	0xb8, 0x1          	MOVWF	(_eeprom_data + 24), B
000078   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00007a   6fb9     movwf	0xb9, 0x1          	MOVWF	(_eeprom_data + 25), B
00007c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00007e   6fba     movwf	0xba, 0x1          	MOVWF	(_eeprom_data + 26), B
000080   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000082   6fbb     movwf	0xbb, 0x1          	MOVWF	(_eeprom_data + 27), B
                                           ;	.line	52; user.c	if (hours_switch_raw && !mins_switch_raw && !secs_switch_raw){
000084   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
000086   d00b     bra	0x9e                 	BRA	_00142_DS_
000088   a480     btfss	0x80, 0x2, 0       	BTFSS	_PORTAbits, 2
00008a   d009     bra	0x9e                 	BRA	_00142_DS_
00008c   ae80     btfss	0x80, 0x7, 0       	BTFSS	_PORTAbits, 7
00008e   d007     bra	0x9e                 	BRA	_00142_DS_
000090   0100     movlb	0                  	BANKSEL	_secs_meter
                                           ;	.line	53; user.c	hours_meter = mins_meter = secs_meter = 0;
000092   6bd9     clrf	0xd9, 0x1           	CLRF	_secs_meter, B
000094   0100     movlb	0                  	BANKSEL	_mins_meter
000096   6bd8     clrf	0xd8, 0x1           	CLRF	_mins_meter, B
000098   0100     movlb	0                  	BANKSEL	_hours_meter
00009a   6bd7     clrf	0xd7, 0x1           	CLRF	_hours_meter, B
00009c   d116     bra	0x2ca                	BRA	_00147_DS_
                                           _00142_DS_:
                                           ;	.line	54; user.c	} else if (!hours_switch_raw && mins_switch_raw && !secs_switch_raw){
00009e   a080     btfss	0x80, 0, 0         	BTFSS	_PORTAbits, 0
0000a0   d00c     bra	0xba                 	BRA	_00137_DS_
0000a2   b480     btfsc	0x80, 0x2, 0       	BTFSC	_PORTAbits, 2
0000a4   d00a     bra	0xba                 	BRA	_00137_DS_
0000a6   ae80     btfss	0x80, 0x7, 0       	BTFSS	_PORTAbits, 7
0000a8   d008     bra	0xba                 	BRA	_00137_DS_
                                           ;	.line	55; user.c	hours_meter = mins_meter = secs_meter = meter_range / 2;
0000aa   0e78     movlw	0x78               	MOVLW	0x78
0000ac   0100     movlb	0                  	BANKSEL	_secs_meter
0000ae   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
0000b0   0100     movlb	0                  	BANKSEL	_mins_meter
0000b2   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
0000b4   0100     movlb	0                  	BANKSEL	_hours_meter
0000b6   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
0000b8   d108     bra	0x2ca                	BRA	_00147_DS_
                                           _00137_DS_:
                                           ;	.line	56; user.c	} else if (!hours_switch_raw && !mins_switch_raw && secs_switch_raw){
0000ba   a080     btfss	0x80, 0, 0         	BTFSS	_PORTAbits, 0
0000bc   d00c     bra	0xd6                 	BRA	_00132_DS_
0000be   a480     btfss	0x80, 0x2, 0       	BTFSS	_PORTAbits, 2
0000c0   d00a     bra	0xd6                 	BRA	_00132_DS_
0000c2   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0000c4   d008     bra	0xd6                 	BRA	_00132_DS_
                                           ;	.line	57; user.c	hours_meter = mins_meter = secs_meter = meter_range - 1;
0000c6   0eef     movlw	0xef               	MOVLW	0xef
0000c8   0100     movlb	0                  	BANKSEL	_secs_meter
0000ca   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
0000cc   0100     movlb	0                  	BANKSEL	_mins_meter
0000ce   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
0000d0   0100     movlb	0                  	BANKSEL	_hours_meter
0000d2   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
0000d4   d0fa     bra	0x2ca                	BRA	_00147_DS_
                                           _00132_DS_:
                                           ;	.line	66; user.c	i = 0;
0000d6   6a00     clrf	0, 0                	CLRF	r0x00
                                           ; ;multiply lit val:0x06 by variable r0x00 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00129_DS_:
                                           ;	.line	68; user.c	hours_meter = meter_range - ((meter_range / (sizeof(eeprom_data) - 1)) * i);
0000d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000da   0d06     mullw	0x6                	MULLW	0x06
0000dc   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0000de   f001
0000e0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000e2   08f0     sublw	0xf0               	SUBLW	0xf0
0000e4   0100     movlb	0                  	BANKSEL	_hours_meter
0000e6   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
                                           ;	.line	70; user.c	(((uint8_t *)(&eeprom_data))[i] / 16));
0000e8   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
0000ea   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000ec   0ea0     movlw	0xa0               	MOVLW	LOW(_eeprom_data)
0000ee   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000f0   0e80     movlw	0x80               	MOVLW	0x80
0000f2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0000f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000f6   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0000f8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0000fa   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0000fc   6ae8     clrf	0xe8, 0             	CLRF	WREG
0000fe   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000100   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000102   ffe9
000104   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
000106   fff3
000108   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00010a   ec90     call	0x1120, 0           	CALL	__gptrget1
00010c   f008
00010e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000110   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
000112   0b0f     andlw	0xf                	ANDLW	0x0f
                                           ; ;multiply lit val:0x10 by variable r0x01 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000114   0d10     mullw	0x10               	MULLW	0x10
000116   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000118   f001
00011a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00011c   08f0     sublw	0xf0               	SUBLW	0xf0
00011e   0100     movlb	0                  	BANKSEL	_mins_meter
000120   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
                                           ;	.line	72; user.c	(((uint8_t *)(&eeprom_data))[i] % 16));
000122   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
000124   6e02     movwf	0x2, 0             	MOVWF	r0x02
000126   0ea0     movlw	0xa0               	MOVLW	LOW(_eeprom_data)
000128   6e01     movwf	0x1, 0             	MOVWF	r0x01
00012a   0e80     movlw	0x80               	MOVLW	0x80
00012c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00012e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000130   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000132   6ae8     clrf	0xe8, 0             	CLRF	WREG
000134   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000136   6ae8     clrf	0xe8, 0             	CLRF	WREG
000138   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00013a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00013c   ffe9
00013e   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
000140   fff3
000142   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000144   ec90     call	0x1120, 0           	CALL	__gptrget1
000146   f008
000148   6e01     movwf	0x1, 0             	MOVWF	r0x01
00014a   0e0f     movlw	0xf                	MOVLW	0x0f
00014c   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x10 by variable r0x01 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00014e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000150   0d10     mullw	0x10               	MULLW	0x10
000152   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000154   f001
000156   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000158   08f0     sublw	0xf0               	SUBLW	0xf0
00015a   0100     movlb	0                  	BANKSEL	_secs_meter
00015c   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
                                           ;	.line	74; user.c	if (debounce_just_pressed(hours_debounce,hours_switch_raw)){
00015e   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
000160   d02f     bra	0x1c0                	BRA	_00108_DS_
000162   0e7c     movlw	0x7c               	MOVLW	0x7c
000164   0100     movlb	0                  	BANKSEL	_hours_debounce
000166   5dcd     subwf	0xcd, 0, 0x1       	SUBWF	_hours_debounce, W, B
000168   e22b     bc	0x1c0                 	BC	_00108_DS_
00016a   6a01     clrf	0x1, 0              	CLRF	r0x01
00016c   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
00016e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000170   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000172   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000174   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000176   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000178   6a01     clrf	0x1, 0              	CLRF	r0x01
00017a   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
                                           ; removed redundant BANKSEL
00017c   51ce     movf	0xce, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
00017e   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
000180   e01f     bz	0x1c0                 	BZ	_00108_DS_
                                           ;	.line	75; user.c	inc_metric_sw_hours();
000182   ec0e     call	0x121c, 0           	CALL	_trigger_save_eeprom
000184   f009
000186   c0a4     movff	0xa4, 0x1          	MOVFF	(_eeprom_data + 4), r0x01
000188   f001
00018a   c0a5     movff	0xa5, 0x2          	MOVFF	(_eeprom_data + 5), r0x02
00018c   f002
00018e   c0a6     movff	0xa6, 0x3          	MOVFF	(_eeprom_data + 6), r0x03
000190   f003
000192   c0a7     movff	0xa7, 0x4          	MOVFF	(_eeprom_data + 7), r0x04
000194   f004
000196   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000198   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00019a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00019c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00019e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0001a0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0001a2   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0001a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001a6   0100     movlb	0                  	BANKSEL	(_eeprom_data + 4)
0001a8   6fa4     movwf	0xa4, 0x1          	MOVWF	(_eeprom_data + 4), B
0001aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
0001ac   6fa5     movwf	0xa5, 0x1          	MOVWF	(_eeprom_data + 5), B
0001ae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0001b0   6fa6     movwf	0xa6, 0x1          	MOVWF	(_eeprom_data + 6), B
0001b2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
0001b4   6fa7     movwf	0xa7, 0x1          	MOVWF	(_eeprom_data + 7), B
                                           ;	.line	76; user.c	i++;
0001b6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           ;	.line	77; user.c	if (i >= sizeof(eeprom_data))
0001b8   0e24     movlw	0x24               	MOVLW	0x24
0001ba   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
0001bc   e301     bnc	0x1c0                	BNC	_00108_DS_
                                           ;	.line	78; user.c	i = 0;
0001be   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00108_DS_:
                                           ;	.line	80; user.c	if (debounce_just_pressed(secs_debounce,secs_switch_raw)){
0001c0   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0001c2   d030     bra	0x224                	BRA	_00114_DS_
0001c4   0e7c     movlw	0x7c               	MOVLW	0x7c
0001c6   0100     movlb	0                  	BANKSEL	_secs_debounce
0001c8   5dd1     subwf	0xd1, 0, 0x1       	SUBWF	_secs_debounce, W, B
0001ca   e22c     bc	0x224                 	BC	_00114_DS_
0001cc   6a01     clrf	0x1, 0              	CLRF	r0x01
0001ce   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0001d0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0001d2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001d4   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0001d6   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0001d8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0001da   6a01     clrf	0x1, 0              	CLRF	r0x01
0001dc   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
                                           ; removed redundant BANKSEL
0001de   51d2     movf	0xd2, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
0001e0   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
0001e2   e020     bz	0x224                 	BZ	_00114_DS_
                                           ;	.line	81; user.c	inc_metric_sw_secs();
0001e4   ec0e     call	0x121c, 0           	CALL	_trigger_save_eeprom
0001e6   f009
0001e8   c0ac     movff	0xac, 0x1          	MOVFF	(_eeprom_data + 12), r0x01
0001ea   f001
0001ec   c0ad     movff	0xad, 0x2          	MOVFF	(_eeprom_data + 13), r0x02
0001ee   f002
0001f0   c0ae     movff	0xae, 0x3          	MOVFF	(_eeprom_data + 14), r0x03
0001f2   f003
0001f4   c0af     movff	0xaf, 0x4          	MOVFF	(_eeprom_data + 15), r0x04
0001f6   f004
0001f8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0001fa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0001fc   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0001fe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000200   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000202   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000204   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
000206   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000208   0100     movlb	0                  	BANKSEL	(_eeprom_data + 12)
00020a   6fac     movwf	0xac, 0x1          	MOVWF	(_eeprom_data + 12), B
00020c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00020e   6fad     movwf	0xad, 0x1          	MOVWF	(_eeprom_data + 13), B
000210   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000212   6fae     movwf	0xae, 0x1          	MOVWF	(_eeprom_data + 14), B
000214   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
000216   6faf     movwf	0xaf, 0x1          	MOVWF	(_eeprom_data + 15), B
                                           ;	.line	82; user.c	i--;
000218   0600     decf	0, 0x1, 0           	DECF	r0x00, F
                                           ;	.line	83; user.c	if (i >= sizeof(eeprom_data))
00021a   0e24     movlw	0x24               	MOVLW	0x24
00021c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
00021e   e302     bnc	0x224                	BNC	_00114_DS_
                                           ;	.line	84; user.c	i = sizeof(eeprom_data) - 1;
000220   0e23     movlw	0x23               	MOVLW	0x23
000222   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00114_DS_:
                                           ;	.line	87; user.c	debounce_add_sample(hours_debounce,hours_switch_raw);
000224   6a01     clrf	0x1, 0              	CLRF	r0x01
000226   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
000228   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00022a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00022c   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00022e   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000230   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000232   6a01     clrf	0x1, 0              	CLRF	r0x01
000234   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
000236   0100     movlb	0                  	BANKSEL	(_hours_debounce + 1)
000238   51ce     movf	0xce, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
00023a   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
00023c   e00e     bz	0x25a                 	BZ	_00118_DS_
00023e   0e7f     movlw	0x7f               	MOVLW	0x7f
000240   0100     movlb	0                  	BANKSEL	_hours_debounce
000242   6fcd     movwf	0xcd, 0x1          	MOVWF	_hours_debounce, B
000244   6a01     clrf	0x1, 0              	CLRF	r0x01
000246   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
000248   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00024a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00024c   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00024e   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000250   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000252   6a01     clrf	0x1, 0              	CLRF	r0x01
000254   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
000256   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000258   6fce     movwf	0xce, 0x1          	MOVWF	(_hours_debounce + 1), B
                                           _00118_DS_:
00025a   c0cd     movff	0xcd, 0x1          	MOVFF	_hours_debounce, r0x01
00025c   f001
00025e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000260   e004     bz	0x26a                 	BZ	_00120_DS_
000262   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
000264   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000266   0100     movlb	0                  	BANKSEL	_hours_debounce
000268   6fcd     movwf	0xcd, 0x1          	MOVWF	_hours_debounce, B
                                           _00120_DS_:
                                           ;	.line	88; user.c	debounce_add_sample(secs_debounce,secs_switch_raw);
00026a   6a01     clrf	0x1, 0              	CLRF	r0x01
00026c   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
00026e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000270   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000272   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000274   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000276   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000278   6a01     clrf	0x1, 0              	CLRF	r0x01
00027a   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
00027c   0100     movlb	0                  	BANKSEL	(_secs_debounce + 1)
00027e   51d2     movf	0xd2, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
000280   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
000282   e00e     bz	0x2a0                 	BZ	_00122_DS_
000284   0e7f     movlw	0x7f               	MOVLW	0x7f
000286   0100     movlb	0                  	BANKSEL	_secs_debounce
000288   6fd1     movwf	0xd1, 0x1          	MOVWF	_secs_debounce, B
00028a   6a01     clrf	0x1, 0              	CLRF	r0x01
00028c   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
00028e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000290   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000292   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000294   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000296   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000298   6a01     clrf	0x1, 0              	CLRF	r0x01
00029a   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
00029c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00029e   6fd2     movwf	0xd2, 0x1          	MOVWF	(_secs_debounce + 1), B
                                           _00122_DS_:
0002a0   c0d1     movff	0xd1, 0x1          	MOVFF	_secs_debounce, r0x01
0002a2   f001
0002a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0002a6   e004     bz	0x2b0                 	BZ	_00124_DS_
0002a8   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
0002aa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0002ac   0100     movlb	0                  	BANKSEL	_secs_debounce
0002ae   6fd1     movwf	0xd1, 0x1          	MOVWF	_secs_debounce, B
                                           _00124_DS_:
                                           ;	.line	90; user.c	save_eeprom_if_needed();
0002b0   ec55     call	0xcaa, 0            	CALL	_save_eeprom_if_needed
0002b2   f006
                                           ;	.line	92; user.c	while (j){
0002b4   6801     setf	0x1, 0              	SETF	r0x01
                                           _00125_DS_:
0002b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0002b8   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0002ba   d70e     bra	0xd8                 	BRA	_00129_DS_
                                           ;	.line	93; user.c	j--;
0002bc   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
                                           ;	.line	94; user.c	do_meters();
0002be   ece0     call	0xfc0, 0            	CALL	_do_meters
0002c0   f007
                                           ;	.line	96; user.c	delay10tcy(5);
0002c2   0e05     movlw	0x5                	MOVLW	0x05
0002c4   ecbc     call	0x1178, 0           	CALL	_delay10tcy
0002c6   f008
0002c8   d7f6     bra	0x2b6                	BRA	_00125_DS_
                                           _00147_DS_:
                                           ;	.line	101; user.c	save_eeprom_if_needed();
0002ca   ec55     call	0xcaa, 0            	CALL	_save_eeprom_if_needed
0002cc   f006
                                           ;	.line	102; user.c	do_meters();
0002ce   ece0     call	0xfc0, 0            	CALL	_do_meters
0002d0   f007
0002d2   d7fb     bra	0x2ca                	BRA	_00147_DS_
                                           _00153_DS_:
0002d4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0002d6   f004
0002d8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0002da   f003
0002dc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0002de   f002
0002e0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0002e2   f001
0002e4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0002e6   f000
0002e8   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1286 (0x0506) bytes ( 0.98%)
                                           ;           	  643 (0x0283) words
                                           ; udata size:	    7 (0x0007) bytes (10.94%)
                                           ; access size:	    5 (0x0005) bytes
                                           
                                           
                                           	end
