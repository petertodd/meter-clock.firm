gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 7-10-2008  00:58:19
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Thu Jul 10 00:58:18 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Thu Jul 10 00:58:18 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_ds3231
                                           	global _from_bcd
                                           	global _to_bcd
                                           	global _read_time_from_ds3231
                                           	global _write_time_to_ds3231
                                           	global _ds3231_time
                                           	global _read_from_ds3231
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __divuchar
                                           	extern __moduchar
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _init_i2c
                                           	extern _i2c_reset
                                           	extern _i2c_start
                                           	extern _i2c_stop
                                           	extern _i2c_write
                                           	extern _i2c_read
                                           	extern _trigger_save_eeprom
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_ds3231_0	udata
                                           _ds3231_time	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ds3231__write_time_to_ds3231	code
                                           _write_time_to_ds3231:
                                           ;	.line	65; ds3231.c	i2c_reset();
000e90   ecc9     call	0x1192, 0           	CALL	_i2c_reset
000e92   f008
                                           ;	.line	66; ds3231.c	i2c_start();
000e94   ecd7     call	0x11ae, 0           	CALL	_i2c_start
000e96   f008
                                           ;	.line	67; ds3231.c	i2c_write(slave_addr_write);
000e98   0ed0     movlw	0xd0               	MOVLW	0xd0
000e9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e9c   ec22     call	0x1044, 0           	CALL	_i2c_write
000e9e   f008
000ea0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	68; ds3231.c	i2c_write(0);
000ea2   0e00     movlw	0                  	MOVLW	0x00
000ea4   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000ea6   ec22     call	0x1044, 0           	CALL	_i2c_write
000ea8   f008
000eaa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000eac   0100     movlb	0                  	BANKSEL	_ds3231_time
                                           ;	.line	69; ds3231.c	i2c_write(to_bcd(ds3231_time.secs));
000eae   51ca     movf	0xca, 0, 0x1        	MOVF	_ds3231_time, W, B
000eb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eb2   ecb3     call	0xd66, 0            	CALL	_to_bcd
000eb4   f006
000eb6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000eb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eba   ec22     call	0x1044, 0           	CALL	_i2c_write
000ebc   f008
000ebe   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000ec0   0100     movlb	0                  	BANKSEL	(_ds3231_time + 1)
                                           ;	.line	70; ds3231.c	i2c_write(to_bcd(ds3231_time.mins));
000ec2   51cb     movf	0xcb, 0, 0x1        	MOVF	(_ds3231_time + 1), W, B
000ec4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ec6   ecb3     call	0xd66, 0            	CALL	_to_bcd
000ec8   f006
000eca   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000ecc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ece   ec22     call	0x1044, 0           	CALL	_i2c_write
000ed0   f008
000ed2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000ed4   0100     movlb	0                  	BANKSEL	(_ds3231_time + 2)
                                           ;	.line	71; ds3231.c	i2c_write(to_bcd(ds3231_time.hours));
000ed6   51cc     movf	0xcc, 0, 0x1        	MOVF	(_ds3231_time + 2), W, B
000ed8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000eda   ecb3     call	0xd66, 0            	CALL	_to_bcd
000edc   f006
000ede   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000ee0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ee2   ec22     call	0x1044, 0           	CALL	_i2c_write
000ee4   f008
000ee6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	72; ds3231.c	i2c_stop();
000ee8   ecea     call	0x11d4, 0           	CALL	_i2c_stop
000eea   f008
000eec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__read_time_from_ds3231	code
                                           _read_time_from_ds3231:
                                           ;	.line	55; ds3231.c	void read_time_from_ds3231(){
000800   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000802   ffe5
000804   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000806   ffe5
                                           ;	.line	56; ds3231.c	ds3231_time.secs = from_bcd(read_from_ds3231(0));
000808   0e00     movlw	0                  	MOVLW	0x00
00080a   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
00080c   ec77     call	0xeee, 0            	CALL	_read_from_ds3231
00080e   f007
000810   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000812   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000814   ec4a     call	0x1094, 0           	CALL	_from_bcd
000816   f008
000818   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00081a   0100     movlb	0                  	BANKSEL	_ds3231_time
00081c   6fca     movwf	0xca, 0x1          	MOVWF	_ds3231_time, B
                                           ;	.line	57; ds3231.c	ds3231_time.mins = from_bcd(read_from_ds3231(1));
00081e   0e01     movlw	0x1                	MOVLW	0x01
000820   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000822   ec77     call	0xeee, 0            	CALL	_read_from_ds3231
000824   f007
000826   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000828   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00082a   ec4a     call	0x1094, 0           	CALL	_from_bcd
00082c   f008
00082e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000830   0100     movlb	0                  	BANKSEL	(_ds3231_time + 1)
000832   6fcb     movwf	0xcb, 0x1          	MOVWF	(_ds3231_time + 1), B
                                           ;	.line	58; ds3231.c	ds3231_time.hours = from_bcd(read_from_ds3231(2));
000834   0e02     movlw	0x2                	MOVLW	0x02
000836   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000838   ec77     call	0xeee, 0            	CALL	_read_from_ds3231
00083a   f007
00083c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00083e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000840   ec4a     call	0x1094, 0           	CALL	_from_bcd
000842   f008
000844   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000846   0100     movlb	0                  	BANKSEL	(_ds3231_time + 2)
000848   6fcc     movwf	0xcc, 0x1          	MOVWF	(_ds3231_time + 2), B
                                           ;	.line	61; ds3231.c	new_temp_sample(read_from_ds3231(0x11));
00084a   0e11     movlw	0x11               	MOVLW	0x11
00084c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00084e   ec77     call	0xeee, 0            	CALL	_read_from_ds3231
000850   f007
000852   6e00     movwf	0, 0               	MOVWF	r0x00
000854   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000856   0100     movlb	0                  	BANKSEL	(_eeprom_data + 16)
000858   51b0     movf	0xb0, 0, 0x1        	MOVF	(_eeprom_data + 16), W, B
00085a   0f80     addlw	0x80               	ADDLW	0x80
00085c   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
00085e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000860   0f80     addlw	0x80               	ADDLW	0x80
000862   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
000864   e20e     bc	0x882                 	BC	_00122_DS_
000866   0e11     movlw	0x11               	MOVLW	0x11
000868   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00086a   ec77     call	0xeee, 0            	CALL	_read_from_ds3231
00086c   f007
00086e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000870   6a01     clrf	0x1, 0              	CLRF	r0x01
000872   0100     movlb	0                  	BANKSEL	(_eeprom_data + 16)
000874   6fb0     movwf	0xb0, 0x1          	MOVWF	(_eeprom_data + 16), B
000876   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000878   6bb1     clrf	0xb1, 0x1           	CLRF	(_eeprom_data + 17), B
                                           ; removed redundant BANKSEL
00087a   6bb2     clrf	0xb2, 0x1           	CLRF	(_eeprom_data + 18), B
                                           ; removed redundant BANKSEL
00087c   6bb3     clrf	0xb3, 0x1           	CLRF	(_eeprom_data + 19), B
00087e   ecfc     call	0x11f8, 0           	CALL	_trigger_save_eeprom
000880   f008
                                           _00122_DS_:
000882   0e11     movlw	0x11               	MOVLW	0x11
000884   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000886   ec77     call	0xeee, 0            	CALL	_read_from_ds3231
000888   f007
00088a   6e00     movwf	0, 0               	MOVWF	r0x00
00088c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00088e   0100     movlb	0                  	BANKSEL	(_eeprom_data + 20)
000890   51b4     movf	0xb4, 0, 0x1        	MOVF	(_eeprom_data + 20), W, B
000892   6e01     movwf	0x1, 0             	MOVWF	r0x01
000894   5000     movf	0, 0, 0             	MOVF	r0x00, W
000896   0f80     addlw	0x80               	ADDLW	0x80
000898   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
00089a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00089c   0f80     addlw	0x80               	ADDLW	0x80
00089e   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
0008a0   e20e     bc	0x8be                 	BC	_00125_DS_
0008a2   0e11     movlw	0x11               	MOVLW	0x11
0008a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a6   ec77     call	0xeee, 0            	CALL	_read_from_ds3231
0008a8   f007
0008aa   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0008ac   6a01     clrf	0x1, 0              	CLRF	r0x01
0008ae   0100     movlb	0                  	BANKSEL	(_eeprom_data + 20)
0008b0   6fb4     movwf	0xb4, 0x1          	MOVWF	(_eeprom_data + 20), B
0008b2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0008b4   6bb5     clrf	0xb5, 0x1           	CLRF	(_eeprom_data + 21), B
                                           ; removed redundant BANKSEL
0008b6   6bb6     clrf	0xb6, 0x1           	CLRF	(_eeprom_data + 22), B
                                           ; removed redundant BANKSEL
0008b8   6bb7     clrf	0xb7, 0x1           	CLRF	(_eeprom_data + 23), B
0008ba   ecfc     call	0x11f8, 0           	CALL	_trigger_save_eeprom
0008bc   f008
                                           _00125_DS_:
0008be   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0008c0   f001
0008c2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0008c4   f000
0008c6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__read_from_ds3231	code
                                           _read_from_ds3231:
                                           ;	.line	42; ds3231.c	uint8_t read_from_ds3231(uint8_t addr){
000eee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000ef0   ffe5
000ef2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ef4   ffd9
000ef6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ef8   ffe5
000efa   0e02     movlw	0x2                	MOVLW	0x02
000efc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000efe   f000
                                           ;	.line	44; ds3231.c	i2c_reset();
000f00   ecc9     call	0x1192, 0           	CALL	_i2c_reset
000f02   f008
                                           ;	.line	45; ds3231.c	i2c_start();
000f04   ecd7     call	0x11ae, 0           	CALL	_i2c_start
000f06   f008
                                           ;	.line	46; ds3231.c	i2c_write(slave_addr_write);
000f08   0ed0     movlw	0xd0               	MOVLW	0xd0
000f0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f0c   ec22     call	0x1044, 0           	CALL	_i2c_write
000f0e   f008
000f10   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	47; ds3231.c	i2c_write(addr);
000f12   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f16   ec22     call	0x1044, 0           	CALL	_i2c_write
000f18   f008
000f1a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	48; ds3231.c	i2c_start();
000f1c   ecd7     call	0x11ae, 0           	CALL	_i2c_start
000f1e   f008
                                           ;	.line	49; ds3231.c	i2c_write(slave_addr_read);
000f20   0ed1     movlw	0xd1               	MOVLW	0xd1
000f22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f24   ec22     call	0x1044, 0           	CALL	_i2c_write
000f26   f008
000f28   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	50; ds3231.c	r = i2c_read(true);
000f2a   0e01     movlw	0x1                	MOVLW	0x01
000f2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f2e   ec18     call	0xe30, 0            	CALL	_i2c_read
000f30   f007
000f32   6e00     movwf	0, 0               	MOVWF	r0x00
000f34   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	51; ds3231.c	i2c_stop();
000f36   ecea     call	0x11d4, 0           	CALL	_i2c_stop
000f38   f008
                                           ;	.line	52; ds3231.c	return r;
000f3a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f3c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f3e   f000
000f40   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f42   ffd9
000f44   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__to_bcd	code
                                           _to_bcd:
                                           ;	.line	38; ds3231.c	uint8_t to_bcd(uint8_t d){
000d66   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d68   ffe5
000d6a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d6c   ffd9
000d6e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d70   ffe5
000d72   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d74   ffe5
000d76   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d78   ffe5
000d7a   0e02     movlw	0x2                	MOVLW	0x02
000d7c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000d7e   f000
                                           ;	.line	39; ds3231.c	return (((d / 10) << 4) & b(11110000)) | ((d % 10) & b(00001111));
000d80   0e0a     movlw	0xa                	MOVLW	0x0a
000d82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d84   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d86   ffe5
000d88   ec7c     call	0xcf8, 0            	CALL	__divuchar
000d8a   f006
000d8c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d8e   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000d90   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000d92   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
000d94   0bf0     andlw	0xf0               	ANDLW	0xf0
000d96   6e02     movwf	0x2, 0             	MOVWF	r0x02
000d98   0ef0     movlw	0xf0               	MOVLW	0xf0
000d9a   1402     andwf	0x2, 0, 0          	ANDWF	r0x02, W
000d9c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d9e   0e0a     movlw	0xa                	MOVLW	0x0a
000da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000da2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000da4   ffe5
000da6   ec09     call	0xc12, 0            	CALL	__moduchar
000da8   f006
000daa   6e00     movwf	0, 0               	MOVWF	r0x00
000dac   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000dae   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000db0   0e0f     movlw	0xf                	MOVLW	0x0f
000db2   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000db4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000db6   1201     iorwf	0x1, 0x1, 0        	IORWF	r0x01, F
000db8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000dba   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000dbc   f002
000dbe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000dc0   f001
000dc2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000dc4   f000
000dc6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000dc8   ffd9
000dca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__from_bcd	code
                                           _from_bcd:
                                           ;	.line	34; ds3231.c	uint8_t from_bcd(uint8_t d){
001094   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001096   ffe5
001098   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00109a   ffd9
00109c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00109e   ffe5
0010a0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0010a2   ffe5
0010a4   0e02     movlw	0x2                	MOVLW	0x02
0010a6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0010a8   f000
                                           ;	.line	35; ds3231.c	return (d & b(00001111)) + (((d & b(11110000)) >> 4) * 10);
0010aa   0e0f     movlw	0xf                	MOVLW	0x0f
0010ac   1400     andwf	0, 0, 0            	ANDWF	r0x00, W
0010ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010b0   0ef0     movlw	0xf0               	MOVLW	0xf0
0010b2   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0010b4   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
0010b6   0b0f     andlw	0xf                	ANDLW	0x0f
                                           ; ;multiply lit val:0x0a by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0010b8   0d0a     mullw	0xa                	MULLW	0x0a
0010ba   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0010bc   f000
0010be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010c0   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0010c2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010c4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0010c6   f001
0010c8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0010ca   f000
0010cc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0010ce   ffd9
0010d0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ds3231__init_ds3231	code
                                           _init_ds3231:
                                           ;	.line	31; ds3231.c	init_i2c();
0011ec   ecdc     call	0x11b8, 0           	CALL	_init_i2c
0011ee   f008
0011f0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  552 (0x0228) bytes ( 0.42%)
                                           ;           	  276 (0x0114) words
                                           ; udata size:	    3 (0x0003) bytes ( 4.69%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Thu Jul 10 00:58:18 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_eeprom
                                           	global _save_eeprom_if_needed
                                           	global _trigger_save_eeprom
                                           	global _eeprom_data
                                           	global _incremental_save_counter
                                           	global _do_eeprom_read
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrget1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _incremental_save_counter	db	0x24
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_eeprom_0	udata
                                           _eeprom_data	res	36
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_eeprom__trigger_save_eeprom	code
                                           _trigger_save_eeprom:
0011f8   0100     movlb	0                  	BANKSEL	_incremental_save_counter
                                           ;	.line	70; eeprom.c	incremental_save_counter = 0;
0011fa   6bc4     clrf	0xc4, 0x1           	CLRF	_incremental_save_counter, B
0011fc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__save_eeprom_if_needed	code
                                           _save_eeprom_if_needed:
                                           ;	.line	45; eeprom.c	void save_eeprom_if_needed(){
000c86   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000c88   ffe5
000c8a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000c8c   ffd9
000c8e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000c90   ffe5
000c92   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000c94   ffe5
000c96   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000c98   ffe5
                                           ;	.line	46; eeprom.c	if ((incremental_save_counter < sizeof(eeprom_data))
000c9a   0e24     movlw	0x24               	MOVLW	0x24
000c9c   0100     movlb	0                  	BANKSEL	_incremental_save_counter
000c9e   5dc4     subwf	0xc4, 0, 0x1       	SUBWF	_incremental_save_counter, W, B
000ca0   e222     bc	0xce6                 	BC	_00121_DS_
                                           ;	.line	47; eeprom.c	&& !EECON1bits.WR){ // Is previous write complete?
000ca2   b2a6     btfsc	0xa6, 0x1, 0       	BTFSC	_EECON1bits, 1
000ca4   d020     bra	0xce6                	BRA	_00121_DS_
                                           ;	.line	48; eeprom.c	EEADR = incremental_save_counter;
000ca6   c0c4     movff	0xc4, 0xfa9        	MOVFF	_incremental_save_counter, _EEADR
000ca8   ffa9
                                           ;	.line	50; eeprom.c	EEDATA = ((uint8_t *)(&eeprom_data))[EEADR];
000caa   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
000cac   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cae   0ea0     movlw	0xa0               	MOVLW	LOW(_eeprom_data)
000cb0   6e00     movwf	0, 0               	MOVWF	r0x00
000cb2   0e80     movlw	0x80               	MOVLW	0x80
000cb4   6e02     movwf	0x2, 0             	MOVWF	r0x02
000cb6   50a9     movf	0xa9, 0, 0          	MOVF	_EEADR, W
000cb8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000cba   6ae8     clrf	0xe8, 0             	CLRF	WREG
000cbc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000cbe   6ae8     clrf	0xe8, 0             	CLRF	WREG
000cc0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000cc2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000cc4   ffe9
000cc6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000cc8   fff3
000cca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ccc   ec7e     call	0x10fc, 0           	CALL	__gptrget1
000cce   f008
000cd0   6ea8     movwf	0xa8, 0            	MOVWF	_EEDATA
                                           ;	.line	52; eeprom.c	EECON1bits.EEPGD = 0;
000cd2   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	53; eeprom.c	EECON1bits.CFGS = 0;
000cd4   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	54; eeprom.c	EECON1bits.WREN = 1;
000cd6   84a6     bsf	0xa6, 0x2, 0         	BSF	_EECON1bits, 2
000cd8   0e55     movlw	0x55               	movlw 0x55
000cda   6ea7     movwf	0xa7, 0            	movwf _EECON2
000cdc   0eaa     movlw	0xaa               	movlw 0xAA
000cde   6ea7     movwf	0xa7, 0            	movwf _EECON2
000ce0   82a6     bsf	0xa6, 0x1, 0         	bsf _EECON1,1
                                           	
000ce2   0100     movlb	0                  	BANKSEL	_incremental_save_counter
                                           ;	.line	65; eeprom.c	incremental_save_counter++;
000ce4   2bc4     incf	0xc4, 0x1, 0x1      	INCF	_incremental_save_counter, F, B
                                           _00121_DS_:
000ce6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000ce8   f002
000cea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cec   f001
000cee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000cf0   f000
000cf2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000cf4   ffd9
000cf6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__init_eeprom	code
                                           _init_eeprom:
                                           ;	.line	34; eeprom.c	void init_eeprom(){
000f46   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f48   ffe5
000f4a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000f4c   ffe5
000f4e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000f50   ffe5
                                           ;	.line	35; eeprom.c	for (EEADR = 0; EEADR < sizeof(eeprom_data); EEADR++){
000f52   6aa9     clrf	0xa9, 0             	CLRF	_EEADR
                                           _00109_DS_:
000f54   0e24     movlw	0x24               	MOVLW	0x24
000f56   5ca9     subwf	0xa9, 0, 0         	SUBWF	_EEADR, W
000f58   e21a     bc	0xf8e                 	BC	_00113_DS_
                                           ;	.line	36; eeprom.c	EECON1bits.EEPGD = 0;
000f5a   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	37; eeprom.c	EECON1bits.CFGS = 0;
000f5c   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	38; eeprom.c	EECON1bits.RD = 1;
000f5e   80a6     bsf	0xa6, 0, 0           	BSF	_EECON1bits, 0
                                           ;	.line	39; eeprom.c	((uint8_t *)(&eeprom_data))[EEADR] = EEDATA;
000f60   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
000f62   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f64   0ea0     movlw	0xa0               	MOVLW	LOW(_eeprom_data)
000f66   6e00     movwf	0, 0               	MOVWF	r0x00
000f68   0e80     movlw	0x80               	MOVLW	0x80
000f6a   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f6c   50a9     movf	0xa9, 0, 0          	MOVF	_EEADR, W
000f6e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f70   6ae8     clrf	0xe8, 0             	CLRF	WREG
000f72   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f74   6ae8     clrf	0xe8, 0             	CLRF	WREG
000f76   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f78   cfa8     movff	0xfa8, 0xfe5       	MOVFF	_EEDATA, POSTDEC1
000f7a   ffe5
000f7c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000f7e   ffe9
000f80   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000f82   fff3
000f84   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f86   ecb6     call	0x116c, 0           	CALL	__gptrput1
000f88   f008
                                           ;	.line	35; eeprom.c	for (EEADR = 0; EEADR < sizeof(eeprom_data); EEADR++){
000f8a   2aa9     incf	0xa9, 0x1, 0        	INCF	_EEADR, F
000f8c   d7e3     bra	0xf54                	BRA	_00109_DS_
                                           _00113_DS_:
000f8e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f90   f002
000f92   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f94   f001
000f96   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f98   f000
000f9a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_eeprom__do_eeprom_read	code
                                           _do_eeprom_read:
                                           ;	.line	29; eeprom.c	EECON1bits.EEPGD = 0;
0011cc   9ea6     bcf	0xa6, 0x7, 0         	BCF	_EECON1bits, 7
                                           ;	.line	30; eeprom.c	EECON1bits.CFGS = 0;
0011ce   9ca6     bcf	0xa6, 0x6, 0         	BCF	_EECON1bits, 6
                                           ;	.line	31; eeprom.c	EECON1bits.RD = 1;
0011d0   80a6     bsf	0xa6, 0, 0           	BSF	_EECON1bits, 0
0011d2   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  216 (0x00d8) bytes ( 0.16%)
                                           ;           	  108 (0x006c) words
                                           ; udata size:	   36 (0x0024) bytes (56.25%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Thu Jul 10 00:58:18 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_i2c
                                           	global _i2c_reset
                                           	global _i2c_start
                                           	global _i2c_stop
                                           	global _i2c_write
                                           	global _i2c_read
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_i2c__i2c_read	code
                                           _i2c_read:
                                           ;	.line	89; i2c.c	uint8_t i2c_read(bool ack){
000e30   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e32   ffe5
000e34   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e36   ffd9
000e38   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e3a   ffe5
000e3c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e3e   ffe5
000e40   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e42   ffe5
000e44   0e02     movlw	0x2                	MOVLW	0x02
000e46   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e48   f000
                                           ;	.line	90; i2c.c	uint8_t i, d = 0;
000e4a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	91; i2c.c	i2c_sda = 1; 
000e4c   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           ;	.line	92; i2c.c	for(i = 8; i != 0; i--) {
000e4e   0e08     movlw	0x8                	MOVLW	0x08
000e50   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00151_DS_:
000e52   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e54   e00b     bz	0xe6c                 	BZ	_00154_DS_
                                           ;	.line	94; i2c.c	d <<= 1;
000e56   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e58   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
                                           _00143_DS_:
                                           ;	.line	96; i2c.c	i2c_scl = 1;
000e5a   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	98; i2c.c	while(i2c_scl_in == 0); // wait for any i2c_scl clock stretching to complete
000e5c   a681     btfss	0x81, 0x3, 0       	BTFSS	_PORTBbits, 3
000e5e   d7fd     bra	0xe5a                	BRA	_00143_DS_
                                           ;	.line	100; i2c.c	if (i2c_sda_in)
000e60   a481     btfss	0x81, 0x2, 0       	BTFSS	_PORTBbits, 2
000e62   d001     bra	0xe66                	BRA	_00147_DS_
                                           ;	.line	101; i2c.c	d |= 1;
000e64   8001     bsf	0x1, 0, 0            	BSF	r0x01, 0
                                           _00147_DS_:
                                           ;	.line	102; i2c.c	i2c_scl = 0;
000e66   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	92; i2c.c	for(i = 8; i != 0; i--) {
000e68   0602     decf	0x2, 0x1, 0         	DECF	r0x02, F
000e6a   d7f3     bra	0xe52                	BRA	_00151_DS_
                                           _00154_DS_:
                                           ;	.line	105; i2c.c	if (ack)
000e6c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e6e   e002     bz	0xe74                 	BZ	_00149_DS_
                                           ;	.line	106; i2c.c	i2c_sda = 0;
000e70   9493     bcf	0x93, 0x2, 0         	BCF	_TRISBbits, 2
000e72   d001     bra	0xe76                	BRA	_00150_DS_
                                           _00149_DS_:
                                           ;	.line	108; i2c.c	i2c_sda = 1;
000e74   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           _00150_DS_:
                                           ;	.line	111; i2c.c	i2c_scl = 1;
000e76   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	113; i2c.c	i2c_scl = 0;
000e78   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	115; i2c.c	i2c_sda = 1;
000e7a   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           ;	.line	117; i2c.c	return d;
000e7c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e7e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000e80   f002
000e82   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000e84   f001
000e86   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e88   f000
000e8a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e8c   ffd9
000e8e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_write	code
                                           _i2c_write:
                                           ;	.line	59; i2c.c	bool i2c_write(uint8_t d){
001044   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001046   ffe5
001048   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00104a   ffd9
00104c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00104e   ffe5
001050   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001052   ffe5
001054   0e02     movlw	0x2                	MOVLW	0x02
001056   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001058   f000
                                           ;	.line	63; i2c.c	for(i = 8; i != 0; i--) {
00105a   0e08     movlw	0x8                	MOVLW	0x08
00105c   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00128_DS_:
00105e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001060   e00b     bz	0x1078                	BZ	_00131_DS_
                                           ;	.line	64; i2c.c	if(d & b(10000000))
001062   ae00     btfss	0, 0x7, 0          	BTFSS	r0x00, 7
001064   d002     bra	0x106a               	BRA	_00126_DS_
                                           ;	.line	65; i2c.c	i2c_sda = 1;
001066   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
001068   d001     bra	0x106c               	BRA	_00127_DS_
                                           _00126_DS_:
                                           ;	.line	67; i2c.c	i2c_sda = 0;
00106a   9493     bcf	0x93, 0x2, 0         	BCF	_TRISBbits, 2
                                           _00127_DS_:
                                           ;	.line	70; i2c.c	i2c_scl = 1;
00106c   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	72; i2c.c	i2c_scl = 0;
00106e   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	74; i2c.c	d <<= 1;
001070   5000     movf	0, 0, 0             	MOVF	r0x00, W
001072   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
                                           ;	.line	63; i2c.c	for(i = 8; i != 0; i--) {
001074   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
001076   d7f3     bra	0x105e               	BRA	_00128_DS_
                                           _00131_DS_:
                                           ;	.line	78; i2c.c	i2c_sda = 1;
001078   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           ;	.line	80; i2c.c	i2c_scl = 1;
00107a   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	83; i2c.c	b = i2c_sda_in; // possible ACK bit
00107c   6a00     clrf	0, 0                	CLRF	r0x00
00107e   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
001080   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           ;	.line	84; i2c.c	i2c_scl = 0;
001082   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	86; i2c.c	return b;
001084   5000     movf	0, 0, 0             	MOVF	r0x00, W
001086   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001088   f001
00108a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00108c   f000
00108e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001090   ffd9
001092   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_stop	code
                                           _i2c_stop:
                                           ;	.line	51; i2c.c	i2c_sda = 0; 
0011d4   9493     bcf	0x93, 0x2, 0         	BCF	_TRISBbits, 2
                                           ;	.line	53; i2c.c	i2c_scl = 1;
0011d6   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	55; i2c.c	i2c_sda = 1;
0011d8   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
0011da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_start	code
                                           _i2c_start:
                                           ;	.line	40; i2c.c	i2c_sda = 1;
0011ae   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           ;	.line	42; i2c.c	i2c_scl = 1;
0011b0   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	44; i2c.c	i2c_sda = 0;
0011b2   9493     bcf	0x93, 0x2, 0         	BCF	_TRISBbits, 2
                                           ;	.line	46; i2c.c	i2c_scl = 0;
0011b4   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
0011b6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__i2c_reset	code
                                           _i2c_reset:
                                           ;	.line	30; i2c.c	i2c_sda = 1;
001192   8493     bsf	0x93, 0x2, 0         	BSF	_TRISBbits, 2
                                           _00109_DS_:
                                           ;	.line	31; i2c.c	while (!i2c_sda_in){
001194   b481     btfsc	0x81, 0x2, 0       	BTFSC	_PORTBbits, 2
001196   d003     bra	0x119e               	BRA	_00112_DS_
                                           ;	.line	32; i2c.c	i2c_scl = 0;
001198   9693     bcf	0x93, 0x3, 0         	BCF	_TRISBbits, 3
                                           ;	.line	34; i2c.c	i2c_scl = 1;
00119a   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
00119c   d7fb     bra	0x1194               	BRA	_00109_DS_
                                           _00112_DS_:
00119e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_i2c__init_i2c	code
                                           _init_i2c:
                                           ;	.line	24; i2c.c	LATBbits.LATB2 = 0;
0011b8   948a     bcf	0x8a, 0x2, 0         	BCF	_LATBbits, 2
                                           ;	.line	25; i2c.c	LATBbits.LATB3 = 0;
0011ba   968a     bcf	0x8a, 0x3, 0         	BCF	_LATBbits, 3
                                           ;	.line	26; i2c.c	i2c_stop();
0011bc   ecea     call	0x11d4, 0           	CALL	_i2c_stop
0011be   f008
0011c0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  218 (0x00da) bytes ( 0.17%)
                                           ;           	  109 (0x006d) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Thu Jul 10 00:58:18 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           	__config 0x300001, 0xf8
                                           	__config 0x300002, 0xf2
                                           	__config 0x300003, 0xfe
                                           	__config 0x300005, 0xff
                                           	__config 0x300006, 0xfa
                                           	__config 0x300008, 0xff
                                           	__config 0x300009, 0xff
                                           	__config 0x30000a, 0xff
                                           	__config 0x30000b, 0xff
                                           	__config 0x30000c, 0xff
                                           	__config 0x30000d, 0xff
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _stack
                                           	global _stack_end
                                           	global _non_pwm_tasks_divider
                                           	global ___ivt_high_int
                                           	global _high_int
                                           	global __tmr0_handler
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _hours_meter
                                           	extern _mins_meter
                                           	extern _secs_meter
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _init_meters
                                           	extern _do_meters
                                           	extern _init_time
                                           	extern _do_time_int
                                           	extern _init_user
                                           	extern _check_for_user_input
                                           	extern _init_eeprom
                                           	extern _save_eeprom_if_needed
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           udata_main_0	udata
                                           _non_pwm_tasks_divider	res	1
                                           
                                           
                                           ustat_main_00	udata	0X0080
                                           _stack	res	31
                                           _stack_end	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main____ivt_high_int	code	0X000008
                                           ___ivt_high_int:
                                           	
000008   efee     goto	0x11dc              	goto _high_int 
00000a   f008
                                           	
                                           ; ; Starting pCode block
                                           S_main__high_int	code
                                           _high_int:
0011dc   b4f2     btfsc	0xf2, 0x2, 0       	btfsc _INTCON, 2 
0011de   efe6     goto	0xdcc               	goto __tmr0_handler
0011e0   f006
0011e2   0010     retfie	0                 	retfie 
                                           	
                                           ; ; Starting pCode block
                                           S_main___tmr0_handler	code
                                           __tmr0_handler:
                                           ;	.line	56; main.c	SIGHANDLER(_tmr0_handler)
000dcc   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
000dce   ffe5
000dd0   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
000dd2   ffe5
000dd4   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
000dd6   ffe5
000dd8   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000dda   ffe5
000ddc   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000dde   ffe5
000de0   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
000de2   ffe5
000de4   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
000de6   ffe5
000de8   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000dea   ffe5
000dec   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000dee   ffe5
000df0   0100     movlb	0                  	BANKSEL	_non_pwm_tasks_divider
                                           ;	.line	59; main.c	non_pwm_tasks_divider--;
000df2   07d3     decf	0xd3, 0x1, 0x1      	DECF	_non_pwm_tasks_divider, F, B
                                           ;	.line	60; main.c	if (!non_pwm_tasks_divider){
000df4   51d3     movf	0xd3, 0, 0x1        	MOVF	_non_pwm_tasks_divider, W, B
000df6   e104     bnz	0xe00                	BNZ	_00114_DS_
                                           ;	.line	61; main.c	check_for_user_input();
000df8   ec63     call	0x2c6, 0            	CALL	_check_for_user_input
000dfa   f001
                                           ;	.line	62; main.c	do_time_int();
000dfc   ec15     call	0xa2a, 0            	CALL	_do_time_int
000dfe   f005
                                           _00114_DS_:
                                           ;	.line	65; main.c	do_meters();
000e00   ecce     call	0xf9c, 0            	CALL	_do_meters
000e02   f007
                                           ;	.line	67; main.c	save_eeprom_if_needed();
000e04   ec43     call	0xc86, 0            	CALL	_save_eeprom_if_needed
000e06   f006
                                           ;	.line	70; main.c	INTCONbits.T0IF = 0;
000e08   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
000e0a   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
000e0c   fffb
000e0e   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
000e10   fffa
000e12   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
000e14   ffea
000e16   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
000e18   ffe9
000e1a   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
000e1c   fff4
000e1e   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
000e20   fff3
000e22   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
000e24   ffe0
000e26   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
000e28   ffd8
000e2a   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
000e2c   ffe8
000e2e   0010     retfie	0                 	RETFIE	
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	75; main.c	OSCCON = b(01110000);
0010d2   0e70     movlw	0x70               	MOVLW	0x70
0010d4   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
                                           ;	.line	78; main.c	TRISA = 0x00;
0010d6   6a92     clrf	0x92, 0             	CLRF	_TRISA
                                           ;	.line	79; main.c	TRISB = 0x00;
0010d8   6a93     clrf	0x93, 0             	CLRF	_TRISB
                                           ;	.line	82; main.c	ADCON1 = 0x7F;
0010da   0e7f     movlw	0x7f               	MOVLW	0x7f
0010dc   6ec1     movwf	0xc1, 0            	MOVWF	_ADCON1
                                           ;	.line	85; main.c	init_eeprom();
0010de   eca3     call	0xf46, 0            	CALL	_init_eeprom
0010e0   f007
                                           ;	.line	86; main.c	init_time();
0010e2   ece1     call	0x11c2, 0           	CALL	_init_time
0010e4   f008
                                           ;	.line	87; main.c	init_meters();
0010e6   ecf2     call	0x11e4, 0           	CALL	_init_meters
0010e8   f008
                                           ;	.line	88; main.c	init_user();
0010ea   ec15     call	0x2a, 0             	CALL	_init_user
0010ec   f000
                                           ;	.line	91; main.c	INTCONbits.T0IF = 0;
0010ee   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	92; main.c	INTCONbits.T0IE = 1;
0010f0   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	93; main.c	INTCONbits.GIE = 1;
0010f2   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	94; main.c	T0CON = b(11001000); 
0010f4   0ec8     movlw	0xc8               	MOVLW	0xc8
0010f6   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
                                           _00120_DS_:
                                           ;	.line	97; main.c	while (1){
0010f8   d7ff     bra	0x10f8               	BRA	_00120_DS_
0010fa   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  156 (0x009c) bytes ( 0.12%)
                                           ;           	   78 (0x004e) words
                                           ; udata size:	   33 (0x0021) bytes (51.56%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Thu Jul 10 00:58:19 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_meters
                                           	global _do_meters
                                           	global _hours_meter
                                           	global _mins_meter
                                           	global _secs_meter
                                           	global _hours_meter_pwm
                                           	global _mins_meter_pwm
                                           	global _secs_meter_pwm
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           udata_meters_0	udata
                                           _hours_meter_pwm	res	1
                                           
                                           udata_meters_1	udata
                                           _mins_meter_pwm	res	1
                                           
                                           udata_meters_2	udata
                                           _secs_meter_pwm	res	1
                                           
                                           udata_meters_3	udata
                                           _hours_meter	res	1
                                           
                                           udata_meters_4	udata
                                           _mins_meter	res	1
                                           
                                           udata_meters_5	udata
                                           _secs_meter	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_meters__do_meters	code
                                           _do_meters:
000f9c   0100     movlb	0                  	BANKSEL	_hours_meter_pwm
                                           ;	.line	35; meters.c	hours_meter_pwm--;
000f9e   07d4     decf	0xd4, 0x1, 0x1      	DECF	_hours_meter_pwm, F, B
                                           ;	.line	36; meters.c	if (!hours_meter_pwm)
000fa0   51d4     movf	0xd4, 0, 0x1        	MOVF	_hours_meter_pwm, W, B
000fa2   e102     bnz	0xfa8                	BNZ	_00110_DS_
                                           ;	.line	37; meters.c	hours_meter_pwm = meter_range;
000fa4   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
000fa6   6fd4     movwf	0xd4, 0x1          	MOVWF	_hours_meter_pwm, B
                                           _00110_DS_:
000fa8   0100     movlb	0                  	BANKSEL	_mins_meter_pwm
                                           ;	.line	38; meters.c	mins_meter_pwm--;
000faa   07d5     decf	0xd5, 0x1, 0x1      	DECF	_mins_meter_pwm, F, B
                                           ;	.line	39; meters.c	if (!mins_meter_pwm)
000fac   51d5     movf	0xd5, 0, 0x1        	MOVF	_mins_meter_pwm, W, B
000fae   e102     bnz	0xfb4                	BNZ	_00112_DS_
                                           ;	.line	40; meters.c	mins_meter_pwm = meter_range;
000fb0   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
000fb2   6fd5     movwf	0xd5, 0x1          	MOVWF	_mins_meter_pwm, B
                                           _00112_DS_:
000fb4   0100     movlb	0                  	BANKSEL	_secs_meter_pwm
                                           ;	.line	41; meters.c	secs_meter_pwm--;
000fb6   07d6     decf	0xd6, 0x1, 0x1      	DECF	_secs_meter_pwm, F, B
                                           ;	.line	42; meters.c	if (!secs_meter_pwm)
000fb8   51d6     movf	0xd6, 0, 0x1        	MOVF	_secs_meter_pwm, W, B
000fba   e102     bnz	0xfc0                	BNZ	_00114_DS_
                                           ;	.line	43; meters.c	secs_meter_pwm = meter_range;
000fbc   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
000fbe   6fd6     movwf	0xd6, 0x1          	MOVWF	_secs_meter_pwm, B
                                           _00114_DS_:
000fc0   0100     movlb	0                  	BANKSEL	_hours_meter
                                           ;	.line	66; meters.c	if (hours_meter > hours_meter_pwm){
000fc2   51d7     movf	0xd7, 0, 0x1        	MOVF	_hours_meter, W, B
000fc4   0100     movlb	0                  	BANKSEL	_hours_meter_pwm
000fc6   5dd4     subwf	0xd4, 0, 0x1       	SUBWF	_hours_meter_pwm, W, B
000fc8   e202     bc	0xfce                 	BC	_00116_DS_
                                           ;	.line	67; meters.c	LATBbits.LATB4 = 0;
000fca   988a     bcf	0x8a, 0x4, 0         	BCF	_LATBbits, 4
000fcc   d001     bra	0xfd0                	BRA	_00117_DS_
                                           _00116_DS_:
                                           ;	.line	69; meters.c	LATBbits.LATB4 = 1;
000fce   888a     bsf	0x8a, 0x4, 0         	BSF	_LATBbits, 4
                                           _00117_DS_:
000fd0   0100     movlb	0                  	BANKSEL	_mins_meter
                                           ;	.line	71; meters.c	if (mins_meter > mins_meter_pwm){
000fd2   51d8     movf	0xd8, 0, 0x1        	MOVF	_mins_meter, W, B
000fd4   0100     movlb	0                  	BANKSEL	_mins_meter_pwm
000fd6   5dd5     subwf	0xd5, 0, 0x1       	SUBWF	_mins_meter_pwm, W, B
000fd8   e202     bc	0xfde                 	BC	_00119_DS_
                                           ;	.line	72; meters.c	LATBbits.LATB1 = 0;
000fda   928a     bcf	0x8a, 0x1, 0         	BCF	_LATBbits, 1
000fdc   d001     bra	0xfe0                	BRA	_00120_DS_
                                           _00119_DS_:
                                           ;	.line	74; meters.c	LATBbits.LATB1 = 1;
000fde   828a     bsf	0x8a, 0x1, 0         	BSF	_LATBbits, 1
                                           _00120_DS_:
000fe0   0100     movlb	0                  	BANKSEL	_secs_meter
                                           ;	.line	76; meters.c	if (secs_meter > secs_meter_pwm){
000fe2   51d9     movf	0xd9, 0, 0x1        	MOVF	_secs_meter, W, B
000fe4   0100     movlb	0                  	BANKSEL	_secs_meter_pwm
000fe6   5dd6     subwf	0xd6, 0, 0x1       	SUBWF	_secs_meter_pwm, W, B
000fe8   e202     bc	0xfee                 	BC	_00122_DS_
                                           ;	.line	77; meters.c	LATBbits.LATB0 = 0;
000fea   908a     bcf	0x8a, 0, 0           	BCF	_LATBbits, 0
000fec   d001     bra	0xff0                	BRA	_00124_DS_
                                           _00122_DS_:
                                           ;	.line	79; meters.c	LATBbits.LATB0 = 1;
000fee   808a     bsf	0x8a, 0, 0           	BSF	_LATBbits, 0
                                           _00124_DS_:
000ff0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_meters__init_meters	code
                                           _init_meters:
                                           ;	.line	26; meters.c	TRISBbits.TRISB0 = 0;
0011e4   9093     bcf	0x93, 0, 0           	BCF	_TRISBbits, 0
                                           ;	.line	27; meters.c	TRISBbits.TRISB1 = 0;
0011e6   9293     bcf	0x93, 0x1, 0         	BCF	_TRISBbits, 1
                                           ;	.line	28; meters.c	TRISBbits.TRISB4 = 0;
0011e8   9893     bcf	0x93, 0x4, 0         	BCF	_TRISBbits, 4
0011ea   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   94 (0x005e) bytes ( 0.07%)
                                           ;           	   47 (0x002f) words
                                           ; udata size:	    6 (0x0006) bytes ( 9.38%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Thu Jul 10 00:58:19 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Thu Jul 10 00:58:19 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _init_time
                                           	global _do_time_int
                                           	global _inc_mins
                                           	global _inc_hours
                                           	global _clear_secs
                                           	global _save_time_to_rtc
                                           	global _load_time_from_rtc
                                           	global _ratio_count_mins
                                           	global _ratio_count_secs
                                           	global _ratio_count_tics
                                           	global _osctune_shadow
                                           	global _OSCTUNE
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _hours_meter
                                           	extern _mins_meter
                                           	extern _secs_meter
                                           	extern _ds3231_time
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _trigger_save_eeprom
                                           	extern _init_ds3231
                                           	extern _read_time_from_ds3231
                                           	extern _write_time_to_ds3231
                                           	extern __divsint
                                           	extern __modsint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _ratio_count_mins	db	0x18
                                           _ratio_count_secs	db	0x3c
                                           _ratio_count_tics	db	0x08
                                           _osctune_shadow	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           
                                           ustat_time_00	udata	0X0F9B
                                           _OSCTUNE	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_time__load_time_from_rtc	code
                                           _load_time_from_rtc:
                                           ;	.line	163; time.c	void load_time_from_rtc(){
00050c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00050e   ffe5
000510   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000512   ffe5
000514   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000516   ffe5
000518   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00051a   ffe5
00051c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00051e   ffe5
000520   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000522   ffe5
                                           ;	.line	164; time.c	read_time_from_ds3231();
000524   ec00     call	0x800, 0            	CALL	_read_time_from_ds3231
000526   f004
                                           ; ;multiply lit val:0x04 by variable _ds3231_time and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000528   0100     movlb	0                  	BANKSEL	_ds3231_time
                                           ;	.line	166; time.c	secs_meter = meter_range - (ds3231_time.secs * 4);
00052a   51ca     movf	0xca, 0, 0x1        	MOVF	_ds3231_time, W, B
00052c   0d04     mullw	0x4                	MULLW	0x04
00052e   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000530   f000
000532   5000     movf	0, 0, 0             	MOVF	r0x00, W
000534   08f0     sublw	0xf0               	SUBLW	0xf0
000536   0100     movlb	0                  	BANKSEL	_secs_meter
000538   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
                                           ; ;multiply lit val:0x04 by variable (_ds3231_time + 1) and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00053a   0100     movlb	0                  	BANKSEL	(_ds3231_time + 1)
                                           ;	.line	167; time.c	mins_meter = meter_range - (ds3231_time.mins * 4);
00053c   51cb     movf	0xcb, 0, 0x1        	MOVF	(_ds3231_time + 1), W, B
00053e   0d04     mullw	0x4                	MULLW	0x04
000540   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000542   f000
000544   5000     movf	0, 0, 0             	MOVF	r0x00, W
000546   08f0     sublw	0xf0               	SUBLW	0xf0
000548   0100     movlb	0                  	BANKSEL	_mins_meter
00054a   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
                                           ; ;multiply lit val:0x0a by variable (_ds3231_time + 2) and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00054c   0100     movlb	0                  	BANKSEL	(_ds3231_time + 2)
                                           ;	.line	168; time.c	hours_meter = meter_range - (ds3231_time.hours * 10);
00054e   51cc     movf	0xcc, 0, 0x1        	MOVF	(_ds3231_time + 2), W, B
000550   0d0a     mullw	0xa                	MULLW	0x0a
000552   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000554   f000
000556   5000     movf	0, 0, 0             	MOVF	r0x00, W
000558   08f0     sublw	0xf0               	SUBLW	0xf0
00055a   0100     movlb	0                  	BANKSEL	_hours_meter
00055c   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
                                           ;	.line	172; time.c	mins_meter -= (meter_range - secs_meter) / num_time_mins;
00055e   c0d9     movff	0xd9, 0            	MOVFF	_secs_meter, r0x00
000560   f000
000562   6a01     clrf	0x1, 0              	CLRF	r0x01
000564   5000     movf	0, 0, 0             	MOVF	r0x00, W
000566   08f0     sublw	0xf0               	SUBLW	0xf0
000568   6e00     movwf	0, 0               	MOVWF	r0x00
00056a   0e00     movlw	0                  	MOVLW	0x00
00056c   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
00056e   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000570   0e3c     movlw	0x3c               	MOVLW	0x3c
000572   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000574   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000576   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000578   5000     movf	0, 0, 0             	MOVF	r0x00, W
00057a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00057c   ec13     call	0x626, 0            	CALL	__divsint
00057e   f003
000580   6e02     movwf	0x2, 0             	MOVWF	r0x02
000582   0e04     movlw	0x4                	MOVLW	0x04
000584   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000586   c0d8     movff	0xd8, 0x3          	MOVFF	_mins_meter, r0x03
000588   f003
00058a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00058c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00058e   0100     movlb	0                  	BANKSEL	_mins_meter
000590   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
                                           ;	.line	173; time.c	hours_meter -= (meter_range - mins_meter) / num_time_hours;
000592   c0d8     movff	0xd8, 0x2          	MOVFF	_mins_meter, r0x02
000594   f002
000596   6a03     clrf	0x3, 0              	CLRF	r0x03
000598   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00059a   08f0     sublw	0xf0               	SUBLW	0xf0
00059c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00059e   0e00     movlw	0                  	MOVLW	0x00
0005a0   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
0005a2   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
0005a4   0e18     movlw	0x18               	MOVLW	0x18
0005a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005a8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005b0   ec13     call	0x626, 0            	CALL	__divsint
0005b2   f003
0005b4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005b6   0e04     movlw	0x4                	MOVLW	0x04
0005b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0005ba   c0d7     movff	0xd7, 0x5          	MOVFF	_hours_meter, r0x05
0005bc   f005
0005be   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0005c0   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
0005c2   0100     movlb	0                  	BANKSEL	_hours_meter
0005c4   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
                                           ;	.line	176; time.c	ratio_count_tics = num_time_tics;
0005c6   0e08     movlw	0x8                	MOVLW	0x08
0005c8   0100     movlb	0                  	BANKSEL	_ratio_count_tics
0005ca   6fc7     movwf	0xc7, 0x1          	MOVWF	_ratio_count_tics, B
                                           ;	.line	177; time.c	ratio_count_secs = num_time_mins - ((meter_range - secs_meter) % num_time_mins);
0005cc   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
0005ce   0e3c     movlw	0x3c               	MOVLW	0x3c
0005d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005d2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0005d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005da   ec8e     call	0x71c, 0            	CALL	__modsint
0005dc   f003
0005de   6e00     movwf	0, 0               	MOVWF	r0x00
0005e0   0e04     movlw	0x4                	MOVLW	0x04
0005e2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0005e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005e6   083c     sublw	0x3c               	SUBLW	0x3c
0005e8   0100     movlb	0                  	BANKSEL	_ratio_count_secs
0005ea   6fc6     movwf	0xc6, 0x1          	MOVWF	_ratio_count_secs, B
                                           ;	.line	178; time.c	ratio_count_mins = num_time_hours - ((meter_range - mins_meter) % num_time_hours);
0005ec   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
0005ee   0e18     movlw	0x18               	MOVLW	0x18
0005f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005f2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005fa   ec8e     call	0x71c, 0            	CALL	__modsint
0005fc   f003
0005fe   6e00     movwf	0, 0               	MOVWF	r0x00
000600   0e04     movlw	0x4                	MOVLW	0x04
000602   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000604   5000     movf	0, 0, 0             	MOVF	r0x00, W
000606   0818     sublw	0x18               	SUBLW	0x18
000608   0100     movlb	0                  	BANKSEL	_ratio_count_mins
00060a   6fc5     movwf	0xc5, 0x1          	MOVWF	_ratio_count_mins, B
00060c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00060e   f005
000610   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000612   f004
000614   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000616   f003
000618   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00061a   f002
00061c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00061e   f001
000620   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000622   f000
000624   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__save_time_to_rtc	code
                                           _save_time_to_rtc:
                                           ;	.line	155; time.c	void save_time_to_rtc(){
000ad2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ad4   ffe5
000ad6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ad8   ffe5
                                           ;	.line	156; time.c	ds3231_time.hours = (meter_range - hours_meter) / 10;
000ada   c0d7     movff	0xd7, 0            	MOVFF	_hours_meter, r0x00
000adc   f000
000ade   6a01     clrf	0x1, 0              	CLRF	r0x01
000ae0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ae2   08f0     sublw	0xf0               	SUBLW	0xf0
000ae4   6e00     movwf	0, 0               	MOVWF	r0x00
000ae6   0e00     movlw	0                  	MOVLW	0x00
000ae8   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
000aea   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000aec   0e0a     movlw	0xa                	MOVLW	0x0a
000aee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000af2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000af6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af8   ec13     call	0x626, 0            	CALL	__divsint
000afa   f003
000afc   6e00     movwf	0, 0               	MOVWF	r0x00
000afe   0e04     movlw	0x4                	MOVLW	0x04
000b00   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000b02   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b04   0100     movlb	0                  	BANKSEL	(_ds3231_time + 2)
000b06   6fcc     movwf	0xcc, 0x1          	MOVWF	(_ds3231_time + 2), B
                                           ;	.line	157; time.c	ds3231_time.mins = (meter_range - mins_meter) / 4;
000b08   c0d8     movff	0xd8, 0            	MOVFF	_mins_meter, r0x00
000b0a   f000
000b0c   6a01     clrf	0x1, 0              	CLRF	r0x01
000b0e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b10   08f0     sublw	0xf0               	SUBLW	0xf0
000b12   6e00     movwf	0, 0               	MOVWF	r0x00
000b14   0e00     movlw	0                  	MOVLW	0x00
000b16   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
000b18   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000b1a   0e04     movlw	0x4                	MOVLW	0x04
000b1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b1e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b22   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b26   ec13     call	0x626, 0            	CALL	__divsint
000b28   f003
000b2a   6e00     movwf	0, 0               	MOVWF	r0x00
000b2c   0e04     movlw	0x4                	MOVLW	0x04
000b2e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000b30   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b32   0100     movlb	0                  	BANKSEL	(_ds3231_time + 1)
000b34   6fcb     movwf	0xcb, 0x1          	MOVWF	(_ds3231_time + 1), B
                                           ;	.line	158; time.c	ds3231_time.secs = (meter_range - secs_meter) / 4;
000b36   c0d9     movff	0xd9, 0            	MOVFF	_secs_meter, r0x00
000b38   f000
000b3a   6a01     clrf	0x1, 0              	CLRF	r0x01
000b3c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b3e   08f0     sublw	0xf0               	SUBLW	0xf0
000b40   6e00     movwf	0, 0               	MOVWF	r0x00
000b42   0e00     movlw	0                  	MOVLW	0x00
000b44   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
000b46   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000b48   0e04     movlw	0x4                	MOVLW	0x04
000b4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b50   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b54   ec13     call	0x626, 0            	CALL	__divsint
000b56   f003
000b58   6e00     movwf	0, 0               	MOVWF	r0x00
000b5a   0e04     movlw	0x4                	MOVLW	0x04
000b5c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000b5e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b60   0100     movlb	0                  	BANKSEL	_ds3231_time
000b62   6fca     movwf	0xca, 0x1          	MOVWF	_ds3231_time, B
                                           ;	.line	160; time.c	write_time_to_ds3231();
000b64   ec48     call	0xe90, 0            	CALL	_write_time_to_ds3231
000b66   f007
000b68   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000b6a   f001
000b6c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000b6e   f000
000b70   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__clear_secs	code
                                           _clear_secs:
                                           ;	.line	146; time.c	void clear_secs(){
000ff2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ff4   ffe5
000ff6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ff8   ffe5
                                           ;	.line	148; time.c	mins_meter += ((meter_range - secs_meter) / num_time_secs);
000ffa   c0d9     movff	0xd9, 0            	MOVFF	_secs_meter, r0x00
000ffc   f000
000ffe   6a01     clrf	0x1, 0              	CLRF	r0x01
001000   5000     movf	0, 0, 0             	MOVF	r0x00, W
001002   08f0     sublw	0xf0               	SUBLW	0xf0
001004   6e00     movwf	0, 0               	MOVWF	r0x00
001006   0e00     movlw	0                  	MOVLW	0x00
001008   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
00100a   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
00100c   0e3c     movlw	0x3c               	MOVLW	0x3c
00100e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001010   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001012   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001014   5000     movf	0, 0, 0             	MOVF	r0x00, W
001016   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001018   ec13     call	0x626, 0            	CALL	__divsint
00101a   f003
00101c   6e00     movwf	0, 0               	MOVWF	r0x00
00101e   0e04     movlw	0x4                	MOVLW	0x04
001020   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001022   c0d8     movff	0xd8, 0x1          	MOVFF	_mins_meter, r0x01
001024   f001
001026   5000     movf	0, 0, 0             	MOVF	r0x00, W
001028   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00102a   0100     movlb	0                  	BANKSEL	_mins_meter
00102c   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
                                           ;	.line	151; time.c	ratio_count_secs = num_time_secs;
00102e   0e3c     movlw	0x3c               	MOVLW	0x3c
001030   0100     movlb	0                  	BANKSEL	_ratio_count_secs
001032   6fc6     movwf	0xc6, 0x1          	MOVWF	_ratio_count_secs, B
                                           ;	.line	152; time.c	secs_meter = meter_range;
001034   0ef0     movlw	0xf0               	MOVLW	0xf0
001036   0100     movlb	0                  	BANKSEL	_secs_meter
001038   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
00103a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00103c   f001
00103e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001040   f000
001042   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__inc_hours	code
                                           _inc_hours:
001180   0100     movlb	0                  	BANKSEL	_hours_meter
                                           ;	.line	135; time.c	hours_meter--;
001182   07d7     decf	0xd7, 0x1, 0x1      	DECF	_hours_meter, F, B
                                           ;	.line	136; time.c	if (!hours_meter){
001184   51d7     movf	0xd7, 0, 0x1        	MOVF	_hours_meter, W, B
001186   e104     bnz	0x1190               	BNZ	_00146_DS_
                                           ;	.line	137; time.c	hours_meter = meter_range;
001188   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
00118a   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
                                           ;	.line	140; time.c	save_metrics();
00118c   ecfc     call	0x11f8, 0           	CALL	_trigger_save_eeprom
00118e   f008
                                           _00146_DS_:
001190   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__inc_mins	code
                                           _inc_mins:
00111e   0100     movlb	0                  	BANKSEL	_mins_meter
                                           ;	.line	123; time.c	mins_meter--;
001120   07d8     decf	0xd8, 0x1, 0x1      	DECF	_mins_meter, F, B
                                           ;	.line	124; time.c	if (!mins_meter)
001122   51d8     movf	0xd8, 0, 0x1        	MOVF	_mins_meter, W, B
001124   e102     bnz	0x112a               	BNZ	_00136_DS_
                                           ;	.line	125; time.c	mins_meter = meter_range;
001126   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
001128   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
                                           _00136_DS_:
00112a   0100     movlb	0                  	BANKSEL	_ratio_count_mins
                                           ;	.line	126; time.c	ratio_count_mins--;
00112c   07c5     decf	0xc5, 0x1, 0x1      	DECF	_ratio_count_mins, F, B
                                           ;	.line	127; time.c	if (!ratio_count_mins){
00112e   51c5     movf	0xc5, 0, 0x1        	MOVF	_ratio_count_mins, W, B
001130   e104     bnz	0x113a               	BNZ	_00139_DS_
                                           ;	.line	128; time.c	ratio_count_mins = num_time_hours;
001132   0e18     movlw	0x18               	MOVLW	0x18
                                           ; removed redundant BANKSEL
001134   6fc5     movwf	0xc5, 0x1          	MOVWF	_ratio_count_mins, B
                                           ;	.line	130; time.c	inc_hours();
001136   ecc0     call	0x1180, 0           	CALL	_inc_hours
001138   f008
                                           _00139_DS_:
00113a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__do_time_int	code
                                           _do_time_int:
                                           ;	.line	70; time.c	void do_time_int(){
000a2a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000a2c   ffe5
000a2e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000a30   ffe5
000a32   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000a34   ffe5
000a36   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000a38   ffe5
000a3a   0100     movlb	0                  	BANKSEL	_ratio_count_tics
                                           ;	.line	73; time.c	ratio_count_tics--;
000a3c   07c7     decf	0xc7, 0x1, 0x1      	DECF	_ratio_count_tics, F, B
                                           ;	.line	74; time.c	if (!ratio_count_tics){
000a3e   51c7     movf	0xc7, 0, 0x1        	MOVF	_ratio_count_tics, W, B
000a40   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
000a42   d03e     bra	0xac0                	BRA	_00122_DS_
                                           ;	.line	75; time.c	ratio_count_tics = num_time_tics;
000a44   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
000a46   6fc7     movwf	0xc7, 0x1          	MOVWF	_ratio_count_tics, B
000a48   0100     movlb	0                  	BANKSEL	_secs_meter
                                           ;	.line	78; time.c	if (!(secs_meter % 4))
000a4a   51d9     movf	0xd9, 0, 0x1        	MOVF	_secs_meter, W, B
000a4c   0b03     andlw	0x3                	ANDLW	0x03
000a4e   e118     bnz	0xa80                	BNZ	_00110_DS_
                                           ;	.line	79; time.c	inc_metric_running_time();
000a50   c0a0     movff	0xa0, 0            	MOVFF	_eeprom_data, r0x00
000a52   f000
000a54   c0a1     movff	0xa1, 0x1          	MOVFF	(_eeprom_data + 1), r0x01
000a56   f001
000a58   c0a2     movff	0xa2, 0x2          	MOVFF	(_eeprom_data + 2), r0x02
000a5a   f002
000a5c   c0a3     movff	0xa3, 0x3          	MOVFF	(_eeprom_data + 3), r0x03
000a5e   f003
000a60   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000a62   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a64   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000a66   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a68   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000a6a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a6c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000a6e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a70   0100     movlb	0                  	BANKSEL	_eeprom_data
000a72   6fa0     movwf	0xa0, 0x1          	MOVWF	_eeprom_data, B
000a74   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000a76   6fa1     movwf	0xa1, 0x1          	MOVWF	(_eeprom_data + 1), B
000a78   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000a7a   6fa2     movwf	0xa2, 0x1          	MOVWF	(_eeprom_data + 2), B
000a7c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000a7e   6fa3     movwf	0xa3, 0x1          	MOVWF	(_eeprom_data + 3), B
                                           _00110_DS_:
000a80   0100     movlb	0                  	BANKSEL	_secs_meter
                                           ;	.line	81; time.c	secs_meter--;
000a82   07d9     decf	0xd9, 0x1, 0x1      	DECF	_secs_meter, F, B
                                           ;	.line	82; time.c	if (!secs_meter){
000a84   51d9     movf	0xd9, 0, 0x1        	MOVF	_secs_meter, W, B
000a86   e114     bnz	0xab0                	BNZ	_00117_DS_
                                           ;	.line	83; time.c	secs_meter = meter_range;
000a88   0ef0     movlw	0xf0               	MOVLW	0xf0
                                           ; removed redundant BANKSEL
000a8a   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
                                           ;	.line	96; time.c	read_time_from_ds3231();
000a8c   ec00     call	0x800, 0            	CALL	_read_time_from_ds3231
000a8e   f004
                                           ;	.line	100; time.c	if (ds3231_time.secs){
000a90   c0ca     movff	0xca, 0            	MOVFF	_ds3231_time, r0x00
000a92   f000
000a94   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a96   e00c     bz	0xab0                 	BZ	_00117_DS_
                                           ;	.line	101; time.c	if (ds3231_time.secs > num_time_secs / 2){
000a98   0e1f     movlw	0x1f               	MOVLW	0x1f
000a9a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000a9c   e305     bnc	0xaa8                	BNC	_00112_DS_
000a9e   0100     movlb	0                  	BANKSEL	_osctune_shadow
                                           ;	.line	103; time.c	osctune_shadow--;
000aa0   07c8     decf	0xc8, 0x1, 0x1      	DECF	_osctune_shadow, F, B
                                           ;	.line	104; time.c	OSCTUNE = osctune_shadow;
000aa2   c0c8     movff	0xc8, 0xf9b        	MOVFF	_osctune_shadow, _OSCTUNE
000aa4   ff9b
000aa6   d004     bra	0xab0                	BRA	_00117_DS_
                                           _00112_DS_:
000aa8   0100     movlb	0                  	BANKSEL	_osctune_shadow
                                           ;	.line	107; time.c	osctune_shadow++;
000aaa   2bc8     incf	0xc8, 0x1, 0x1      	INCF	_osctune_shadow, F, B
                                           ;	.line	108; time.c	OSCTUNE = osctune_shadow;
000aac   c0c8     movff	0xc8, 0xf9b        	MOVFF	_osctune_shadow, _OSCTUNE
000aae   ff9b
                                           _00117_DS_:
000ab0   0100     movlb	0                  	BANKSEL	_ratio_count_secs
                                           ;	.line	113; time.c	ratio_count_secs--;
000ab2   07c6     decf	0xc6, 0x1, 0x1      	DECF	_ratio_count_secs, F, B
                                           ;	.line	114; time.c	if (!ratio_count_secs){
000ab4   51c6     movf	0xc6, 0, 0x1        	MOVF	_ratio_count_secs, W, B
000ab6   e104     bnz	0xac0                	BNZ	_00122_DS_
                                           ;	.line	115; time.c	ratio_count_secs = num_time_mins;
000ab8   0e3c     movlw	0x3c               	MOVLW	0x3c
                                           ; removed redundant BANKSEL
000aba   6fc6     movwf	0xc6, 0x1          	MOVWF	_ratio_count_secs, B
                                           ;	.line	117; time.c	inc_mins();
000abc   ec8f     call	0x111e, 0           	CALL	_inc_mins
000abe   f008
                                           _00122_DS_:
000ac0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000ac2   f003
000ac4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000ac6   f002
000ac8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000aca   f001
000acc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000ace   f000
000ad0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_time__init_time	code
                                           _init_time:
                                           ;	.line	54; time.c	init_ds3231();
0011c2   ecf6     call	0x11ec, 0           	CALL	_init_ds3231
0011c4   f008
                                           ;	.line	55; time.c	load_time_from_rtc();
0011c6   ec86     call	0x50c, 0            	CALL	_load_time_from_rtc
0011c8   f002
0011ca   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  750 (0x02ee) bytes ( 0.57%)
                                           ;           	  375 (0x0177) words
                                           ; udata size:	    1 (0x0001) bytes ( 1.56%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Sep 23 2007)
                                           ; This file generated Thu Jul 10 00:58:19 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f1320
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _silly_hour_display
                                           	global _init_user
                                           	global _check_for_user_input
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _ECCPASbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _eeprom_data
                                           	extern _ds3231_time
                                           	extern _hours_meter
                                           	extern _mins_meter
                                           	extern _secs_meter
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _BAUDCTL
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _ECCPAS
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _delay10tcy
                                           	extern _save_time_to_rtc
                                           	extern _clear_secs
                                           	extern _inc_hours
                                           	extern _inc_mins
                                           	extern _save_eeprom_if_needed
                                           	extern _trigger_save_eeprom
                                           	extern _do_meters
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           
                                           udata_user_0	udata
                                           _silly_hour_display	res	1
                                           
                                           udata_user_1	udata
                                           _hours_debounce	res	2
                                           
                                           udata_user_2	udata
                                           _mins_debounce	res	2
                                           
                                           udata_user_3	udata
                                           _secs_debounce	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_user__check_for_user_input	code
                                           _check_for_user_input:
                                           ;	.line	104; user.c	void check_for_user_input(){
0002c6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0002c8   ffe5
0002ca   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0002cc   ffe5
0002ce   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0002d0   ffe5
0002d2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0002d4   ffe5
                                           ;	.line	105; user.c	if (debounce_just_pressed(hours_debounce,hours_switch_raw)){
0002d6   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
0002d8   d041     bra	0x35c                	BRA	_00186_DS_
0002da   0e7c     movlw	0x7c               	MOVLW	0x7c
0002dc   0100     movlb	0                  	BANKSEL	_hours_debounce
0002de   5dcd     subwf	0xcd, 0, 0x1       	SUBWF	_hours_debounce, W, B
0002e0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0002e2   d03c     bra	0x35c                	BRA	_00186_DS_
0002e4   6a00     clrf	0, 0                	CLRF	r0x00
0002e6   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
0002e8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0002ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002ec   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0002ee   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0002f0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0002f2   6a00     clrf	0, 0                	CLRF	r0x00
0002f4   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
0002f6   51ce     movf	0xce, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
0002f8   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0002fa   e030     bz	0x35c                 	BZ	_00186_DS_
                                           ;	.line	106; user.c	inc_one_hour();
0002fc   ecc0     call	0x1180, 0           	CALL	_inc_hours
0002fe   f008
000300   ecc0     call	0x1180, 0           	CALL	_inc_hours
000302   f008
000304   ecc0     call	0x1180, 0           	CALL	_inc_hours
000306   f008
000308   ecc0     call	0x1180, 0           	CALL	_inc_hours
00030a   f008
00030c   ecc0     call	0x1180, 0           	CALL	_inc_hours
00030e   f008
000310   ecc0     call	0x1180, 0           	CALL	_inc_hours
000312   f008
000314   ecc0     call	0x1180, 0           	CALL	_inc_hours
000316   f008
000318   ecc0     call	0x1180, 0           	CALL	_inc_hours
00031a   f008
00031c   ecc0     call	0x1180, 0           	CALL	_inc_hours
00031e   f008
000320   ecc0     call	0x1180, 0           	CALL	_inc_hours
000322   f008
                                           ;	.line	107; user.c	inc_metric_sw_hours();
000324   ecfc     call	0x11f8, 0           	CALL	_trigger_save_eeprom
000326   f008
000328   c0a4     movff	0xa4, 0            	MOVFF	(_eeprom_data + 4), r0x00
00032a   f000
00032c   c0a5     movff	0xa5, 0x1          	MOVFF	(_eeprom_data + 5), r0x01
00032e   f001
000330   c0a6     movff	0xa6, 0x2          	MOVFF	(_eeprom_data + 6), r0x02
000332   f002
000334   c0a7     movff	0xa7, 0x3          	MOVFF	(_eeprom_data + 7), r0x03
000336   f003
000338   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00033a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00033c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00033e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000340   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000342   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000344   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000346   5000     movf	0, 0, 0             	MOVF	r0x00, W
000348   0100     movlb	0                  	BANKSEL	(_eeprom_data + 4)
00034a   6fa4     movwf	0xa4, 0x1          	MOVWF	(_eeprom_data + 4), B
00034c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00034e   6fa5     movwf	0xa5, 0x1          	MOVWF	(_eeprom_data + 5), B
000350   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000352   6fa6     movwf	0xa6, 0x1          	MOVWF	(_eeprom_data + 6), B
000354   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000356   6fa7     movwf	0xa7, 0x1          	MOVWF	(_eeprom_data + 7), B
                                           ;	.line	108; user.c	save_time_to_rtc();
000358   ec69     call	0xad2, 0            	CALL	_save_time_to_rtc
00035a   f005
                                           _00186_DS_:
                                           ;	.line	115; user.c	if (debounce_just_pressed(mins_debounce,mins_switch_raw)){
00035c   b480     btfsc	0x80, 0x2, 0       	BTFSC	_PORTAbits, 2
00035e   d034     bra	0x3c8                	BRA	_00190_DS_
000360   0e7c     movlw	0x7c               	MOVLW	0x7c
000362   0100     movlb	0                  	BANKSEL	_mins_debounce
000364   5dcf     subwf	0xcf, 0, 0x1       	SUBWF	_mins_debounce, W, B
000366   e230     bc	0x3c8                 	BC	_00190_DS_
000368   6a00     clrf	0, 0                	CLRF	r0x00
00036a   b480     btfsc	0x80, 0x2, 0       	BTFSC	_PORTAbits, 2
00036c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00036e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000370   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000372   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000374   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000376   6a00     clrf	0, 0                	CLRF	r0x00
000378   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
00037a   51d0     movf	0xd0, 0, 0x1        	MOVF	(_mins_debounce + 1), W, B
00037c   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00037e   e024     bz	0x3c8                 	BZ	_00190_DS_
                                           ;	.line	116; user.c	inc_one_minute();
000380   ec8f     call	0x111e, 0           	CALL	_inc_mins
000382   f008
000384   ec8f     call	0x111e, 0           	CALL	_inc_mins
000386   f008
000388   ec8f     call	0x111e, 0           	CALL	_inc_mins
00038a   f008
00038c   ec8f     call	0x111e, 0           	CALL	_inc_mins
00038e   f008
                                           ;	.line	117; user.c	inc_metric_sw_mins();
000390   ecfc     call	0x11f8, 0           	CALL	_trigger_save_eeprom
000392   f008
000394   c0a8     movff	0xa8, 0            	MOVFF	(_eeprom_data + 8), r0x00
000396   f000
000398   c0a9     movff	0xa9, 0x1          	MOVFF	(_eeprom_data + 9), r0x01
00039a   f001
00039c   c0aa     movff	0xaa, 0x2          	MOVFF	(_eeprom_data + 10), r0x02
00039e   f002
0003a0   c0ab     movff	0xab, 0x3          	MOVFF	(_eeprom_data + 11), r0x03
0003a2   f003
0003a4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0003a6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003a8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0003aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003ac   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0003ae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0003b0   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0003b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003b4   0100     movlb	0                  	BANKSEL	(_eeprom_data + 8)
0003b6   6fa8     movwf	0xa8, 0x1          	MOVWF	(_eeprom_data + 8), B
0003b8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0003ba   6fa9     movwf	0xa9, 0x1          	MOVWF	(_eeprom_data + 9), B
0003bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
0003be   6faa     movwf	0xaa, 0x1          	MOVWF	(_eeprom_data + 10), B
0003c0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0003c2   6fab     movwf	0xab, 0x1          	MOVWF	(_eeprom_data + 11), B
                                           ;	.line	118; user.c	save_time_to_rtc();
0003c4   ec69     call	0xad2, 0            	CALL	_save_time_to_rtc
0003c6   f005
                                           _00190_DS_:
                                           ;	.line	121; user.c	if (debounce_just_pressed(secs_debounce,secs_switch_raw)){
0003c8   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0003ca   d02e     bra	0x428                	BRA	_00194_DS_
0003cc   0e7c     movlw	0x7c               	MOVLW	0x7c
0003ce   0100     movlb	0                  	BANKSEL	_secs_debounce
0003d0   5dd1     subwf	0xd1, 0, 0x1       	SUBWF	_secs_debounce, W, B
0003d2   e22a     bc	0x428                 	BC	_00194_DS_
0003d4   6a00     clrf	0, 0                	CLRF	r0x00
0003d6   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0003d8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0003da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003dc   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0003de   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0003e0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0003e2   6a00     clrf	0, 0                	CLRF	r0x00
0003e4   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ; removed redundant BANKSEL
0003e6   51d2     movf	0xd2, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
0003e8   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0003ea   e01e     bz	0x428                 	BZ	_00194_DS_
                                           ;	.line	122; user.c	clear_secs();
0003ec   ecf9     call	0xff2, 0            	CALL	_clear_secs
0003ee   f007
                                           ;	.line	123; user.c	inc_metric_sw_secs();
0003f0   ecfc     call	0x11f8, 0           	CALL	_trigger_save_eeprom
0003f2   f008
0003f4   c0ac     movff	0xac, 0            	MOVFF	(_eeprom_data + 12), r0x00
0003f6   f000
0003f8   c0ad     movff	0xad, 0x1          	MOVFF	(_eeprom_data + 13), r0x01
0003fa   f001
0003fc   c0ae     movff	0xae, 0x2          	MOVFF	(_eeprom_data + 14), r0x02
0003fe   f002
000400   c0af     movff	0xaf, 0x3          	MOVFF	(_eeprom_data + 15), r0x03
000402   f003
000404   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000406   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000408   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00040a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00040c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00040e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000410   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000412   5000     movf	0, 0, 0             	MOVF	r0x00, W
000414   0100     movlb	0                  	BANKSEL	(_eeprom_data + 12)
000416   6fac     movwf	0xac, 0x1          	MOVWF	(_eeprom_data + 12), B
000418   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00041a   6fad     movwf	0xad, 0x1          	MOVWF	(_eeprom_data + 13), B
00041c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00041e   6fae     movwf	0xae, 0x1          	MOVWF	(_eeprom_data + 14), B
000420   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000422   6faf     movwf	0xaf, 0x1          	MOVWF	(_eeprom_data + 15), B
                                           ;	.line	124; user.c	save_time_to_rtc();
000424   ec69     call	0xad2, 0            	CALL	_save_time_to_rtc
000426   f005
                                           _00194_DS_:
                                           ;	.line	127; user.c	debounce_add_sample(hours_debounce,hours_switch_raw);
000428   6a00     clrf	0, 0                	CLRF	r0x00
00042a   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
00042c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00042e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000430   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000432   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000434   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000436   6a00     clrf	0, 0                	CLRF	r0x00
000438   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00043a   0100     movlb	0                  	BANKSEL	(_hours_debounce + 1)
00043c   51ce     movf	0xce, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
00043e   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
000440   e00e     bz	0x45e                 	BZ	_00198_DS_
000442   0e7f     movlw	0x7f               	MOVLW	0x7f
000444   0100     movlb	0                  	BANKSEL	_hours_debounce
000446   6fcd     movwf	0xcd, 0x1          	MOVWF	_hours_debounce, B
000448   6a00     clrf	0, 0                	CLRF	r0x00
00044a   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
00044c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00044e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000450   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000452   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000454   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000456   6a00     clrf	0, 0                	CLRF	r0x00
000458   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00045a   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
00045c   6fce     movwf	0xce, 0x1          	MOVWF	(_hours_debounce + 1), B
                                           _00198_DS_:
00045e   c0cd     movff	0xcd, 0            	MOVFF	_hours_debounce, r0x00
000460   f000
000462   5000     movf	0, 0, 0             	MOVF	r0x00, W
000464   e004     bz	0x46e                 	BZ	_00200_DS_
000466   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000468   5000     movf	0, 0, 0             	MOVF	r0x00, W
00046a   0100     movlb	0                  	BANKSEL	_hours_debounce
00046c   6fcd     movwf	0xcd, 0x1          	MOVWF	_hours_debounce, B
                                           _00200_DS_:
                                           ;	.line	128; user.c	debounce_add_sample(mins_debounce,mins_switch_raw);
00046e   6a00     clrf	0, 0                	CLRF	r0x00
000470   b480     btfsc	0x80, 0x2, 0       	BTFSC	_PORTAbits, 2
000472   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000474   5000     movf	0, 0, 0             	MOVF	r0x00, W
000476   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000478   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00047a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00047c   6a00     clrf	0, 0                	CLRF	r0x00
00047e   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
000480   0100     movlb	0                  	BANKSEL	(_mins_debounce + 1)
000482   51d0     movf	0xd0, 0, 0x1        	MOVF	(_mins_debounce + 1), W, B
000484   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
000486   e00e     bz	0x4a4                 	BZ	_00202_DS_
000488   0e7f     movlw	0x7f               	MOVLW	0x7f
00048a   0100     movlb	0                  	BANKSEL	_mins_debounce
00048c   6fcf     movwf	0xcf, 0x1          	MOVWF	_mins_debounce, B
00048e   6a00     clrf	0, 0                	CLRF	r0x00
000490   b480     btfsc	0x80, 0x2, 0       	BTFSC	_PORTAbits, 2
000492   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000494   5000     movf	0, 0, 0             	MOVF	r0x00, W
000496   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000498   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00049a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00049c   6a00     clrf	0, 0                	CLRF	r0x00
00049e   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0004a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0004a2   6fd0     movwf	0xd0, 0x1          	MOVWF	(_mins_debounce + 1), B
                                           _00202_DS_:
0004a4   c0cf     movff	0xcf, 0            	MOVFF	_mins_debounce, r0x00
0004a6   f000
0004a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004aa   e004     bz	0x4b4                 	BZ	_00204_DS_
0004ac   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0004ae   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004b0   0100     movlb	0                  	BANKSEL	_mins_debounce
0004b2   6fcf     movwf	0xcf, 0x1          	MOVWF	_mins_debounce, B
                                           _00204_DS_:
                                           ;	.line	129; user.c	debounce_add_sample(secs_debounce,secs_switch_raw);
0004b4   6a00     clrf	0, 0                	CLRF	r0x00
0004b6   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0004b8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0004ba   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004bc   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0004be   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0004c0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0004c2   6a00     clrf	0, 0                	CLRF	r0x00
0004c4   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0004c6   0100     movlb	0                  	BANKSEL	(_secs_debounce + 1)
0004c8   51d2     movf	0xd2, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
0004ca   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0004cc   e00e     bz	0x4ea                 	BZ	_00206_DS_
0004ce   0e7f     movlw	0x7f               	MOVLW	0x7f
0004d0   0100     movlb	0                  	BANKSEL	_secs_debounce
0004d2   6fd1     movwf	0xd1, 0x1          	MOVWF	_secs_debounce, B
0004d4   6a00     clrf	0, 0                	CLRF	r0x00
0004d6   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0004d8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0004da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004dc   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0004de   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0004e0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0004e2   6a00     clrf	0, 0                	CLRF	r0x00
0004e4   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0004e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0004e8   6fd2     movwf	0xd2, 0x1          	MOVWF	(_secs_debounce + 1), B
                                           _00206_DS_:
0004ea   c0d1     movff	0xd1, 0            	MOVFF	_secs_debounce, r0x00
0004ec   f000
0004ee   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004f0   e004     bz	0x4fa                 	BZ	_00209_DS_
0004f2   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0004f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004f6   0100     movlb	0                  	BANKSEL	_secs_debounce
0004f8   6fd1     movwf	0xd1, 0x1          	MOVWF	_secs_debounce, B
                                           _00209_DS_:
0004fa   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0004fc   f003
0004fe   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000500   f002
000502   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000504   f001
000506   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000508   f000
00050a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_user__init_user	code
                                           _init_user:
                                           ;	.line	38; user.c	void init_user(){
00002a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00002c   ffe5
00002e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000030   ffe5
000032   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000034   ffe5
000036   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000038   ffe5
00003a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00003c   ffe5
                                           ;	.line	41; user.c	TRISAbits.TRISA0 = 1;
00003e   8092     bsf	0x92, 0, 0           	BSF	_TRISAbits, 0
                                           ;	.line	42; user.c	TRISAbits.TRISA2 = 1;
000040   8492     bsf	0x92, 0x2, 0         	BSF	_TRISAbits, 2
                                           ;	.line	43; user.c	TRISAbits.TRISA7 = 1;
000042   8e92     bsf	0x92, 0x7, 0         	BSF	_TRISAbits, 7
                                           ;	.line	45; user.c	if (hours_switch_raw || mins_switch_raw || secs_switch_raw){
000044   a080     btfss	0x80, 0, 0         	BTFSS	_PORTAbits, 0
000046   d004     bra	0x50                 	BRA	_00142_DS_
000048   a480     btfss	0x80, 0x2, 0       	BTFSS	_PORTAbits, 2
00004a   d002     bra	0x50                 	BRA	_00142_DS_
00004c   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
00004e   d130     bra	0x2b0                	BRA	_00146_DS_
                                           _00142_DS_:
                                           ;	.line	47; user.c	inc_metric_meta();
000050   ecfc     call	0x11f8, 0           	CALL	_trigger_save_eeprom
000052   f008
000054   c0b8     movff	0xb8, 0            	MOVFF	(_eeprom_data + 24), r0x00
000056   f000
000058   c0b9     movff	0xb9, 0x1          	MOVFF	(_eeprom_data + 25), r0x01
00005a   f001
00005c   c0ba     movff	0xba, 0x2          	MOVFF	(_eeprom_data + 26), r0x02
00005e   f002
000060   c0bb     movff	0xbb, 0x3          	MOVFF	(_eeprom_data + 27), r0x03
000062   f003
000064   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000066   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000068   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00006a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00006c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00006e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000070   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000072   5000     movf	0, 0, 0             	MOVF	r0x00, W
000074   0100     movlb	0                  	BANKSEL	(_eeprom_data + 24)
000076   6fb8     movwf	0xb8, 0x1          	MOVWF	(_eeprom_data + 24), B
000078   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00007a   6fb9     movwf	0xb9, 0x1          	MOVWF	(_eeprom_data + 25), B
00007c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00007e   6fba     movwf	0xba, 0x1          	MOVWF	(_eeprom_data + 26), B
000080   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000082   6fbb     movwf	0xbb, 0x1          	MOVWF	(_eeprom_data + 27), B
                                           ;	.line	50; user.c	if (hours_switch_raw || mins_switch_raw && !secs_switch_raw){
000084   a080     btfss	0x80, 0, 0         	BTFSS	_PORTAbits, 0
000086   d004     bra	0x90                 	BRA	_00137_DS_
000088   b480     btfsc	0x80, 0x2, 0       	BTFSC	_PORTAbits, 2
00008a   d018     bra	0xbc                 	BRA	_00138_DS_
00008c   ae80     btfss	0x80, 0x7, 0       	BTFSS	_PORTAbits, 7
00008e   d016     bra	0xbc                 	BRA	_00138_DS_
                                           _00137_DS_:
                                           ;	.line	51; user.c	if (hours_switch_raw)
000090   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
000092   d008     bra	0xa4                 	BRA	_00106_DS_
                                           ;	.line	52; user.c	hours_meter = mins_meter = secs_meter = 1;
000094   0e01     movlw	0x1                	MOVLW	0x01
000096   0100     movlb	0                  	BANKSEL	_secs_meter
000098   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
00009a   0100     movlb	0                  	BANKSEL	_mins_meter
00009c   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
00009e   0100     movlb	0                  	BANKSEL	_hours_meter
0000a0   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
0000a2   d007     bra	0xb2                 	BRA	_00109_DS_
                                           _00106_DS_:
                                           ;	.line	54; user.c	hours_meter = mins_meter = secs_meter = meter_range / 2;
0000a4   0e78     movlw	0x78               	MOVLW	0x78
0000a6   0100     movlb	0                  	BANKSEL	_secs_meter
0000a8   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
0000aa   0100     movlb	0                  	BANKSEL	_mins_meter
0000ac   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
0000ae   0100     movlb	0                  	BANKSEL	_hours_meter
0000b0   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
                                           _00109_DS_:
                                           ;	.line	56; user.c	save_eeprom_if_needed();
0000b2   ec43     call	0xc86, 0            	CALL	_save_eeprom_if_needed
0000b4   f006
                                           ;	.line	57; user.c	do_meters();
0000b6   ecce     call	0xf9c, 0            	CALL	_do_meters
0000b8   f007
0000ba   d7fb     bra	0xb2                 	BRA	_00109_DS_
                                           _00138_DS_:
                                           ;	.line	67; user.c	i = 0;
0000bc   6a00     clrf	0, 0                	CLRF	r0x00
                                           ; ;multiply lit val:0x06 by variable r0x00 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00135_DS_:
                                           ;	.line	69; user.c	hours_meter = meter_range - ((meter_range / (sizeof(eeprom_data) - 1)) * i);
0000be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000c0   0d06     mullw	0x6                	MULLW	0x06
0000c2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0000c4   f001
0000c6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000c8   08f0     sublw	0xf0               	SUBLW	0xf0
0000ca   0100     movlb	0                  	BANKSEL	_hours_meter
0000cc   6fd7     movwf	0xd7, 0x1          	MOVWF	_hours_meter, B
                                           ;	.line	71; user.c	(((uint8_t *)(&eeprom_data))[i] / 16));
0000ce   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
0000d0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000d2   0ea0     movlw	0xa0               	MOVLW	LOW(_eeprom_data)
0000d4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000d6   0e80     movlw	0x80               	MOVLW	0x80
0000d8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0000da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000dc   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0000de   6ae8     clrf	0xe8, 0             	CLRF	WREG
0000e0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0000e2   6ae8     clrf	0xe8, 0             	CLRF	WREG
0000e4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0000e6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0000e8   ffe9
0000ea   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
0000ec   fff3
0000ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000f0   ec7e     call	0x10fc, 0           	CALL	__gptrget1
0000f2   f008
0000f4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000f6   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
0000f8   0b0f     andlw	0xf                	ANDLW	0x0f
                                           ; ;multiply lit val:0x10 by variable r0x01 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0000fa   0d10     mullw	0x10               	MULLW	0x10
0000fc   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0000fe   f001
000100   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000102   08f0     sublw	0xf0               	SUBLW	0xf0
000104   0100     movlb	0                  	BANKSEL	_mins_meter
000106   6fd8     movwf	0xd8, 0x1          	MOVWF	_mins_meter, B
                                           ;	.line	73; user.c	(((uint8_t *)(&eeprom_data))[i] % 16));
000108   0e00     movlw	0                  	MOVLW	HIGH(_eeprom_data)
00010a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00010c   0ea0     movlw	0xa0               	MOVLW	LOW(_eeprom_data)
00010e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000110   0e80     movlw	0x80               	MOVLW	0x80
000112   6e03     movwf	0x3, 0             	MOVWF	r0x03
000114   5000     movf	0, 0, 0             	MOVF	r0x00, W
000116   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000118   6ae8     clrf	0xe8, 0             	CLRF	WREG
00011a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00011c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00011e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000120   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000122   ffe9
000124   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
000126   fff3
000128   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00012a   ec7e     call	0x10fc, 0           	CALL	__gptrget1
00012c   f008
00012e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000130   0e0f     movlw	0xf                	MOVLW	0x0f
000132   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x10 by variable r0x01 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000134   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000136   0d10     mullw	0x10               	MULLW	0x10
000138   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00013a   f001
00013c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00013e   08f0     sublw	0xf0               	SUBLW	0xf0
000140   0100     movlb	0                  	BANKSEL	_secs_meter
000142   6fd9     movwf	0xd9, 0x1          	MOVWF	_secs_meter, B
                                           ;	.line	75; user.c	if (debounce_just_pressed(hours_debounce,hours_switch_raw)){
000144   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
000146   d02f     bra	0x1a6                	BRA	_00114_DS_
000148   0e7c     movlw	0x7c               	MOVLW	0x7c
00014a   0100     movlb	0                  	BANKSEL	_hours_debounce
00014c   5dcd     subwf	0xcd, 0, 0x1       	SUBWF	_hours_debounce, W, B
00014e   e22b     bc	0x1a6                 	BC	_00114_DS_
000150   6a01     clrf	0x1, 0              	CLRF	r0x01
000152   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
000154   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000156   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000158   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00015a   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00015c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00015e   6a01     clrf	0x1, 0              	CLRF	r0x01
000160   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
                                           ; removed redundant BANKSEL
000162   51ce     movf	0xce, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
000164   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
000166   e01f     bz	0x1a6                 	BZ	_00114_DS_
                                           ;	.line	76; user.c	inc_metric_sw_hours();
000168   ecfc     call	0x11f8, 0           	CALL	_trigger_save_eeprom
00016a   f008
00016c   c0a4     movff	0xa4, 0x1          	MOVFF	(_eeprom_data + 4), r0x01
00016e   f001
000170   c0a5     movff	0xa5, 0x2          	MOVFF	(_eeprom_data + 5), r0x02
000172   f002
000174   c0a6     movff	0xa6, 0x3          	MOVFF	(_eeprom_data + 6), r0x03
000176   f003
000178   c0a7     movff	0xa7, 0x4          	MOVFF	(_eeprom_data + 7), r0x04
00017a   f004
00017c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00017e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000180   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000182   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000184   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000186   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000188   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
00018a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00018c   0100     movlb	0                  	BANKSEL	(_eeprom_data + 4)
00018e   6fa4     movwf	0xa4, 0x1          	MOVWF	(_eeprom_data + 4), B
000190   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000192   6fa5     movwf	0xa5, 0x1          	MOVWF	(_eeprom_data + 5), B
000194   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000196   6fa6     movwf	0xa6, 0x1          	MOVWF	(_eeprom_data + 6), B
000198   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
00019a   6fa7     movwf	0xa7, 0x1          	MOVWF	(_eeprom_data + 7), B
                                           ;	.line	77; user.c	i++;
00019c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           ;	.line	78; user.c	if (i >= sizeof(eeprom_data))
00019e   0e24     movlw	0x24               	MOVLW	0x24
0001a0   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
0001a2   e301     bnc	0x1a6                	BNC	_00114_DS_
                                           ;	.line	79; user.c	i = 0;
0001a4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00114_DS_:
                                           ;	.line	81; user.c	if (debounce_just_pressed(secs_debounce,secs_switch_raw)){
0001a6   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0001a8   d030     bra	0x20a                	BRA	_00120_DS_
0001aa   0e7c     movlw	0x7c               	MOVLW	0x7c
0001ac   0100     movlb	0                  	BANKSEL	_secs_debounce
0001ae   5dd1     subwf	0xd1, 0, 0x1       	SUBWF	_secs_debounce, W, B
0001b0   e22c     bc	0x20a                 	BC	_00120_DS_
0001b2   6a01     clrf	0x1, 0              	CLRF	r0x01
0001b4   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
0001b6   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0001b8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001ba   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0001bc   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0001be   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0001c0   6a01     clrf	0x1, 0              	CLRF	r0x01
0001c2   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
                                           ; removed redundant BANKSEL
0001c4   51d2     movf	0xd2, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
0001c6   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
0001c8   e020     bz	0x20a                 	BZ	_00120_DS_
                                           ;	.line	82; user.c	inc_metric_sw_secs();
0001ca   ecfc     call	0x11f8, 0           	CALL	_trigger_save_eeprom
0001cc   f008
0001ce   c0ac     movff	0xac, 0x1          	MOVFF	(_eeprom_data + 12), r0x01
0001d0   f001
0001d2   c0ad     movff	0xad, 0x2          	MOVFF	(_eeprom_data + 13), r0x02
0001d4   f002
0001d6   c0ae     movff	0xae, 0x3          	MOVFF	(_eeprom_data + 14), r0x03
0001d8   f003
0001da   c0af     movff	0xaf, 0x4          	MOVFF	(_eeprom_data + 15), r0x04
0001dc   f004
0001de   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0001e0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0001e2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0001e4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0001e6   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0001e8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0001ea   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0001ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001ee   0100     movlb	0                  	BANKSEL	(_eeprom_data + 12)
0001f0   6fac     movwf	0xac, 0x1          	MOVWF	(_eeprom_data + 12), B
0001f2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
0001f4   6fad     movwf	0xad, 0x1          	MOVWF	(_eeprom_data + 13), B
0001f6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0001f8   6fae     movwf	0xae, 0x1          	MOVWF	(_eeprom_data + 14), B
0001fa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
0001fc   6faf     movwf	0xaf, 0x1          	MOVWF	(_eeprom_data + 15), B
                                           ;	.line	83; user.c	i--;
0001fe   0600     decf	0, 0x1, 0           	DECF	r0x00, F
                                           ;	.line	84; user.c	if (i >= sizeof(eeprom_data))
000200   0e24     movlw	0x24               	MOVLW	0x24
000202   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000204   e302     bnc	0x20a                	BNC	_00120_DS_
                                           ;	.line	85; user.c	i = sizeof(eeprom_data) - 1;
000206   0e23     movlw	0x23               	MOVLW	0x23
000208   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00120_DS_:
                                           ;	.line	88; user.c	debounce_add_sample(hours_debounce,hours_switch_raw);
00020a   6a01     clrf	0x1, 0              	CLRF	r0x01
00020c   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
00020e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000210   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000212   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000214   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000216   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000218   6a01     clrf	0x1, 0              	CLRF	r0x01
00021a   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
00021c   0100     movlb	0                  	BANKSEL	(_hours_debounce + 1)
00021e   51ce     movf	0xce, 0, 0x1        	MOVF	(_hours_debounce + 1), W, B
000220   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
000222   e00e     bz	0x240                 	BZ	_00124_DS_
000224   0e7f     movlw	0x7f               	MOVLW	0x7f
000226   0100     movlb	0                  	BANKSEL	_hours_debounce
000228   6fcd     movwf	0xcd, 0x1          	MOVWF	_hours_debounce, B
00022a   6a01     clrf	0x1, 0              	CLRF	r0x01
00022c   b080     btfsc	0x80, 0, 0         	BTFSC	_PORTAbits, 0
00022e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000230   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000232   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
000234   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
000236   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000238   6a01     clrf	0x1, 0              	CLRF	r0x01
00023a   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
00023c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00023e   6fce     movwf	0xce, 0x1          	MOVWF	(_hours_debounce + 1), B
                                           _00124_DS_:
000240   c0cd     movff	0xcd, 0x1          	MOVFF	_hours_debounce, r0x01
000242   f001
000244   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000246   e004     bz	0x250                 	BZ	_00126_DS_
000248   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
00024a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00024c   0100     movlb	0                  	BANKSEL	_hours_debounce
00024e   6fcd     movwf	0xcd, 0x1          	MOVWF	_hours_debounce, B
                                           _00126_DS_:
                                           ;	.line	89; user.c	debounce_add_sample(secs_debounce,secs_switch_raw);
000250   6a01     clrf	0x1, 0              	CLRF	r0x01
000252   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
000254   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000256   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000258   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00025a   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00025c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00025e   6a01     clrf	0x1, 0              	CLRF	r0x01
000260   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
000262   0100     movlb	0                  	BANKSEL	(_secs_debounce + 1)
000264   51d2     movf	0xd2, 0, 0x1        	MOVF	(_secs_debounce + 1), W, B
000266   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
000268   e00e     bz	0x286                 	BZ	_00128_DS_
00026a   0e7f     movlw	0x7f               	MOVLW	0x7f
00026c   0100     movlb	0                  	BANKSEL	_secs_debounce
00026e   6fd1     movwf	0xd1, 0x1          	MOVWF	_secs_debounce, B
000270   6a01     clrf	0x1, 0              	CLRF	r0x01
000272   be80     btfsc	0x80, 0x7, 0       	BTFSC	_PORTAbits, 7
000274   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000276   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000278   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00027a   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00027c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00027e   6a01     clrf	0x1, 0              	CLRF	r0x01
000280   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
000282   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000284   6fd2     movwf	0xd2, 0x1          	MOVWF	(_secs_debounce + 1), B
                                           _00128_DS_:
000286   c0d1     movff	0xd1, 0x1          	MOVFF	_secs_debounce, r0x01
000288   f001
00028a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00028c   e004     bz	0x296                 	BZ	_00130_DS_
00028e   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
000290   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000292   0100     movlb	0                  	BANKSEL	_secs_debounce
000294   6fd1     movwf	0xd1, 0x1          	MOVWF	_secs_debounce, B
                                           _00130_DS_:
                                           ;	.line	91; user.c	save_eeprom_if_needed();
000296   ec43     call	0xc86, 0            	CALL	_save_eeprom_if_needed
000298   f006
                                           ;	.line	93; user.c	while (j){
00029a   6801     setf	0x1, 0              	SETF	r0x01
                                           _00131_DS_:
00029c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00029e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0002a0   d70e     bra	0xbe                 	BRA	_00135_DS_
                                           ;	.line	94; user.c	j--;
0002a2   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
                                           ;	.line	95; user.c	do_meters();
0002a4   ecce     call	0xf9c, 0            	CALL	_do_meters
0002a6   f007
                                           ;	.line	97; user.c	delay10tcy(5);
0002a8   0e05     movlw	0x5                	MOVLW	0x05
0002aa   ecaa     call	0x1154, 0           	CALL	_delay10tcy
0002ac   f008
0002ae   d7f6     bra	0x29c                	BRA	_00131_DS_
                                           _00146_DS_:
0002b0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0002b2   f004
0002b4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0002b6   f003
0002b8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0002ba   f002
0002bc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0002be   f001
0002c0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0002c2   f000
0002c4   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1250 (0x04e2) bytes ( 0.95%)
                                           ;           	  625 (0x0271) words
                                           ; udata size:	    7 (0x0007) bytes (10.94%)
                                           ; access size:	    5 (0x0005) bytes
                                           
                                           
                                           	end
